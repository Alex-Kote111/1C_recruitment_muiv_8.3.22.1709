

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда	
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Объект.АвторДокумента = ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОпределениеВидимостиОписанияЗакрытия();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаЗакрытияПриИзменении(Элемент)	
	ОпределениеВидимостиОписанияЗакрытия();		
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеВидимостиОписанияЗакрытия()

	Если Объект.ПричинаЗакрытия = ПредопределенноеЗначение("Перечисление.ПричиныЗакрытияВакансий.ДругаяПричина") Тогда
		Элементы.ОписаниеПричины.Видимость = Истина;
	Иначе
		Элементы.ОписаниеПричины.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗакрытьВакансиюНаСайтеУниверситета(Команда)
	
	ОчиститьСообщения();
	
	ОтветПользователя = Ждать ВопросАсинх("Вы уверены, что хотите закрыть вакансию? При закрытии вакансии она будет удалена с сайта", РежимДиалогаВопрос.ДаНет,,, "Закрыть вакансию?");
	Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НомерВакансии = СтрРазделить(Объект.Вакансия, " ")[1];
	
	HTTPСоединение = Новый HTTPСоединение("taukpebkr3.temp.swtest.ru");
	HTTPЗапрос = Новый HTTPЗапрос("/includes/delete_vacancy.php?vacancy_number=" + НомерВакансии);
	HTTPЗапрос.Заголовки.Вставить("Application", "1C_recruitment");
		
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось закрыть вакансию на сайте университета. Код ответа - " + HTTPОтвет.КодСостояния);
		Иначе
			ОбщегоНазначенияКлиент.ВывестиСообщение("Вакансия на сайте университета успешно закрыта.");
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ИзменитьСтатусВакансии(ПараметрыЗаписи.РежимЗаписи, Объект.Вакансия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСтатусВакансии(РежимЗаписи, Вакансия)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ВакансияОбъект = Вакансия.ПолучитьОбъект();
		ВакансияОбъект.СтатусВакансии = Перечисления.СтатусыВакансий.Закрыта;
		ВакансияОбъект.ВакансияРазмещенаНаСайте = Ложь;
		ВакансияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ИзменитьСтатусЗаявкиНаПодбор(РежимЗаписи, ВакансияОбъект.ДокументОснование.Заявка);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда;
		ВакансияОбъект = Вакансия.ПолучитьОбъект();
		ВакансияОбъект.СтатусВакансии = Перечисления.СтатусыВакансий.ВРаботе;
		ВакансияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ИзменитьСтатусЗаявкиНаПодбор(РежимЗаписи, ВакансияОбъект.ДокументОснование.Заявка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьСтатусЗаявкиНаПодбор(РежимЗаписи, Заявка)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявокНаПодбор.Закрыта;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда;
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.СтатусЗаявки = Перечисления.СтатусыЗаявокНаПодбор.ВРаботе;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	КонецЕсли;

КонецПроцедуры






