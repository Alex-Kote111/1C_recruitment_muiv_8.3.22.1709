
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда	
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	
		Объект.АвторДокумента = ТекущийПользователь;
		Объект.ИнициаторЗаявки = ТекущийПользователь.Сотрудник;
		Объект.Подразделение = ТекущийПользователь.Сотрудник.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьОбязанности();	
	ЗаполнитьТребования();
	ЗаполнитьУсловия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностныеОбязанностиПриИзменении(Элемент)
	ЗаполнитьОбязанности();
КонецПроцедуры

&НаКлиенте
Процедура ТребованияПриИзменении(Элемент)
	ЗаполнитьТребования();
КонецПроцедуры

&НаКлиенте
Процедура ОбразованиеПриИзменении(Элемент)
	ЗаполнитьТребования();	
КонецПроцедуры

&НаКлиенте
Процедура ОпытРаботыПриИзменении(Элемент)
	ЗаполнитьТребования();
КонецПроцедуры

&НаКлиенте
Процедура УсловияПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ТипЗанятостиПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРаботыПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ФорматРаботыПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаТрудаОтПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаТрудаДоПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ДоВычетаНалогаПриИзменении(Элемент)
	ЗаполнитьУсловия();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбязанности()
	
	Если НЕ ПустаяСтрока(Объект.ДолжностныеОбязанности) Тогда
		Элементы.ДекорацияТекстОбязанности.Заголовок = Объект.ДолжностныеОбязанности;
	Иначе
		Элементы.ДекорацияТекстОбязанности.Заголовок = "Обязанности не указаны";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТребования()
	
	Если ПустаяСтрока(Объект.Требования) И Объект.Образование.Пустая() И Объект.ОпытРаботы.Пустая() Тогда
		Элементы.ДекорацияТекстТребования.Заголовок = "Требования не указаны";
		Возврат;
	КонецЕсли; 
	
	ЗаголовокДекорации = "";
	
	Если НЕ Объект.Образование.Пустая() Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "Образование: " + Объект.Образование + Символы.ПС; 
	КонецЕсли;
	
	Если НЕ Объект.ОпытРаботы.Пустая() Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "Опыт работы: " + Объект.ОпытРаботы + Символы.ПС; 
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.Требования) Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + Объект.Требования; 
	КонецЕсли;
	
	Элементы.ДекорацияТекстТребования.Заголовок = ЗаголовокДекорации;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУсловия()
	
	Если ПустаяСтрока(Объект.Условия) И Объект.ТипЗанятости.Пустая() И Объект.ФорматРаботы.Пустая() И Объект.ГрафикРаботы.Пустая() И Объект.ОплатаТрудаОт = 0 И Объект.ОплатаТрудаДо = 0 Тогда
		Элементы.ДекорацияТекстУсловия.Заголовок = "Условия не указаны";
		Возврат;
	КонецЕсли;
	
	ЗаголовокДекорации = "";
		
	Если НЕ Объект.ТипЗанятости.Пустая() Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "Тип занятости: " + Объект.ТипЗанятости + Символы.ПС; 
	КонецЕсли;
	
	Если НЕ Объект.ГрафикРаботы.Пустая() Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "График работы: " + Объект.ГрафикРаботы + Символы.ПС; 
	КонецЕсли;
	
	Если НЕ Объект.ФорматРаботы.Пустая() Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "Формат работы: " + Объект.ФорматРаботы + Символы.ПС; 
	КонецЕсли;
	
	Если Объект.ОплатаТрудаОт = 0 И Объект.ОплатаТрудаДо <> 0 Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "Оплата труда до: "  + Объект.ОплатаТрудаДо + " рублей в месяц";
	ИначеЕсли Объект.ОплатаТрудаОт <> 0 И Объект.ОплатаТрудаДо = 0 Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + "Оплата труда от: "  + Объект.ОплатаТрудаОт + " рублей в месяц";
	ИначеЕсли Объект.ОплатаТрудаОт <> 0 И Объект.ОплатаТрудаДо <> 0 Тогда 
		ЗаголовокДекорации = ЗаголовокДекорации + "Оплата труда от: "  + Объект.ОплатаТрудаОт + " до: " + Объект.ОплатаТрудаДо + " рублей в месяц";
	КонецЕсли;
	
	Если Объект.ДоВычетаНалога И (Объект.ОплатаТрудаОт <> 0 ИЛИ Объект.ОплатаТрудаДо <> 0) Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + " (до вычета налога)" + Символы.ПС;
	ИначеЕсли НЕ Объект.ДоВычетаНалога И (Объект.ОплатаТрудаОт <> 0 ИЛИ Объект.ОплатаТрудаДо <> 0) Тогда 
		ЗаголовокДекорации = ЗаголовокДекорации + Символы.ПС;
	КонецЕсли;
			
	Если НЕ ПустаяСтрока(Объект.Условия) Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + Объект.Условия; 
	КонецЕсли;
	
	Элементы.ДекорацияТекстУсловия.Заголовок = ЗаголовокДекорации; 	

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИзПрофиляДолжности(Команда) 
	
	ОчиститьСообщения();
	
	Если Объект.ПрофильДолжности.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите профиль должности";
		Сообщение.Поле = "Объект.ПрофильДолжности";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Обязанности, требования, условия - будут заполнены из профиля должности. Продолжить?"; 
	Кнопки = РежимДиалогаВопрос.ДаНет; 
	ЗаголовокВопроса = "Заявка будет заполнена по данным профиля должности";
	
	ОтветПользователя = Ждать ВопросАсинх(ТекстВопроса, Кнопки,,, ЗаголовокВопроса);
	
	Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПрофиляДолжности = ПолучитьДанныеПрофиляДолжности(Объект.ПрофильДолжности);
	ЗаполнитьЗаявкуДаннымиПрофиля(ДанныеПрофиляДолжности); 
	
	// Обновляю отображение обязанностей, требований, условий
	ЗаполнитьОбязанности();	
	ЗаполнитьТребования();
	ЗаполнитьУсловия();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрофиляДолжности(ПрофильДолжности)

	ДанныеПрофиляДолжности = Новый Структура;
	ДанныеПрофиляДолжности.Вставить("КатегорияДолжности", ПрофильДолжности.КатегорияДолжности);
	ДанныеПрофиляДолжности.Вставить("РуководительПодразделения", ПрофильДолжности.РуководительПодразделения);
	ДанныеПрофиляДолжности.Вставить("Образование", ПрофильДолжности.Образование);
	ДанныеПрофиляДолжности.Вставить("ОпытРаботы", ПрофильДолжности.ОпытРаботы);
	ДанныеПрофиляДолжности.Вставить("ДолжностныеОбязанности", ПрофильДолжности.ДолжностныеОбязанности);
	ДанныеПрофиляДолжности.Вставить("Требования", ПрофильДолжности.Требования);
	ДанныеПрофиляДолжности.Вставить("Условия", ПрофильДолжности.Условия);
	ДанныеПрофиляДолжности.Вставить("ТипЗанятости", ПрофильДолжности.ТипЗанятости);
	ДанныеПрофиляДолжности.Вставить("ГрафикРаботы", ПрофильДолжности.ГрафикРаботы);
	ДанныеПрофиляДолжности.Вставить("ФорматРаботы", ПрофильДолжности.ФорматРаботы);
	ДанныеПрофиляДолжности.Вставить("ОплатаТрудаОт", ПрофильДолжности.ОплатаТрудаОт);
	ДанныеПрофиляДолжности.Вставить("ОплатаТрудаДо", ПрофильДолжности.ОплатаТрудаДо);
	ДанныеПрофиляДолжности.Вставить("ДоВычетаНалога", ПрофильДолжности.ДоВычетаНалога);
	
	// Данные ТЧ "ПрофессиональныеНавыки" 
	ПрофессиональныеНавыки = ПрофильДолжности.ПрофессиональныеНавыки;
	СписокНавыков = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ПрофессиональныеНавыки Цикл
		ДанныеНавыка = Новый Структура("Навык, УровеньВладения", СтрокаТЧ.Навык, СтрокаТЧ.УровеньВладения);
		СписокНавыков.Добавить(ДанныеНавыка);	
	КонецЦикла;
	ДанныеПрофиляДолжности.Вставить("ПрофессиональныеНавыки", СписокНавыков);
	
	// Данные ТЧ "ЛичныеКачества" 
	ЛичныеКачества = ПрофильДолжности.ЛичныеКачества;
	СписокКачеств = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ЛичныеКачества Цикл
		Качество = Новый Структура("Качество", СтрокаТЧ.Качество);
		СписокКачеств.Добавить(Качество);	
	КонецЦикла;
	ДанныеПрофиляДолжности.Вставить("ЛичныеКачества", СписокКачеств);
	
	// Данные ТЧ "ЗнанияЯзыков"
	ЗнанияЯзыков = ПрофильДолжности.ЗнанияЯзыков;
	СписокЯзыков = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ЗнанияЯзыков Цикл
		ЗнаниеЯзыка = Новый Структура("Язык, УровеньВладения", СтрокаТЧ.Язык, СтрокаТЧ.УровеньВладения);
		СписокЯзыков.Добавить(ЗнаниеЯзыка);	
	КонецЦикла; 
	ДанныеПрофиляДолжности.Вставить("ЗнанияЯзыков", СписокЯзыков);
		
    Возврат ДанныеПрофиляДолжности;
		
КонецФункции
	
&НаКлиенте
Процедура ЗаполнитьЗаявкуДаннымиПрофиля(ДанныеПрофиляДолжности)
	
	Объект.КатегорияДолжности = ДанныеПрофиляДолжности.КатегорияДолжности;
	Объект.ИнициаторЗаявки = ДанныеПрофиляДолжности.РуководительПодразделения;
	Объект.Образование = ДанныеПрофиляДолжности.Образование;
	Объект.ОпытРаботы = ДанныеПрофиляДолжности.ОпытРаботы;
	Объект.ДолжностныеОбязанности = ДанныеПрофиляДолжности.ДолжностныеОбязанности;
	Объект.Требования = ДанныеПрофиляДолжности.Требования;
	Объект.Условия = ДанныеПрофиляДолжности.Условия;
	Объект.ТипЗанятости = ДанныеПрофиляДолжности.ТипЗанятости;
	Объект.ГрафикРаботы = ДанныеПрофиляДолжности.ГрафикРаботы;
	Объект.ФорматРаботы = ДанныеПрофиляДолжности.ФорматРаботы;
	Объект.ОплатаТрудаОт = ДанныеПрофиляДолжности.ОплатаТрудаОт;
	Объект.ОплатаТрудаДо = ДанныеПрофиляДолжности.ОплатаТрудаДо;
	Объект.ДоВычетаНалога = ДанныеПрофиляДолжности.ДоВычетаНалога;
	
	Объект.ПрофессиональныеНавыки.Очистить();	
	СписокНавыков = ДанныеПрофиляДолжности.ПрофессиональныеНавыки;
	Для Каждого ПрофессиональныйНавык Из СписокНавыков Цикл
		СтрокаТЧ = Объект.ПрофессиональныеНавыки.Добавить();
		СтрокаТЧ.Навык = ПрофессиональныйНавык.Навык;
		СтрокаТЧ.УровеньВладения = ПрофессиональныйНавык.УровеньВладения;
	КонецЦикла;
	
	Объект.ЛичныеКачества.Очистить();
	СписокКачеств = ДанныеПрофиляДолжности.ЛичныеКачества;
	Для Каждого ЛичноеКачество Из СписокКачеств Цикл
		СтрокаТЧ = Объект.ЛичныеКачества.Добавить();
		СтрокаТЧ.Качество = ЛичноеКачество.Качество;
	КонецЦикла;
	
	Объект.ЗнанияЯзыков.Очистить();	
	СписокЯзыков = ДанныеПрофиляДолжности.ЗнанияЯзыков;
	Для Каждого ЗнаниеЯзыка Из СписокЯзыков Цикл
		СтрокаТЧ = Объект.ЗнанияЯзыков.Добавить();
		СтрокаТЧ.Язык = ЗнаниеЯзыка.Язык;
		СтрокаТЧ.УровеньВладения = ЗнаниеЯзыка.УровеньВладения;
	КонецЦикла;

КонецПроцедуры



