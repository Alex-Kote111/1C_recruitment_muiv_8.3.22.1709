
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда	
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Объект.ОтветственныйЗаВакансию = ТекущийПользователь.Сотрудник;
		Объект.АвторДокумента = ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.ВакансияРазмещенаНаСайте Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ПодменюКомандВакансииОбновление.ПодчиненныеЭлементы.ФормаОбновитьВакансиюНаСайтеУниверситета.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстВакансии = ТекущийОбъект.ХранилищеФорматированногоТекста.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ХранилищеФорматированногоТекста = Новый ХранилищеЗначения(ТекстВакансии);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьТекстВакансииИзПрофиля(Команда)
	
	ТекстВопроса = "Текст вакансии будет заполнен из профиля должности. Текущий текст вакансии будет удален. Продолжить?"; 
	Кнопки = РежимДиалогаВопрос.ДаНет; 
	ЗаголовокВопроса = "Текст вакансии будет заполнен по данным профиля должности";
	
	ОтветПользователя = Ждать ВопросАсинх(ТекстВопроса, Кнопки,,, ЗаголовокВопроса);
	
	Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПрофиляДолжности = ПолучитьДанныеПрофиляДолжности(Объект.ПрофильДолжности);
	    
	ТекстВакансии = "";
		
	ШрифтЗаголовков = Новый Шрифт(, 12, Истина);
	
	// Добавление обязанностей
	ЗаголовокОбязанности = ТекстВакансии.Добавить("Обязанности:" + Символы.ПС);		
	ЗаголовокОбязанности.Шрифт = ШрифтЗаголовков;	
	
	ТекстВакансии.Добавить(ДанныеПрофиляДолжности.Обязанности + Символы.ПС); 
	
	// Добавление требований
	ЗаголовокТребований = ТекстВакансии.Добавить("Требования:" + Символы.ПС);		
	ЗаголовокТребований.Шрифт = ШрифтЗаголовков;
	
	ТребованияНачало = ДанныеПрофиляДолжности.Образование + Символы.ПС + ДанныеПрофиляДолжности.ОпытРаботы + Символы.ПС; 	
	ТекстВакансии.Добавить(ТребованияНачало + ДанныеПрофиляДолжности.Требования + Символы.ПС);
	
	// Добавление условий
	ЗаголовокУсловий = ТекстВакансии.Добавить("Условия:" + Символы.ПС);		
	ЗаголовокУсловий.Шрифт = ШрифтЗаголовков;
	
	УсловияНачало = ДанныеПрофиляДолжности.ТипЗанятости + Символы.ПС + ДанныеПрофиляДолжности.ГрафикРаботы + Символы.ПС 
														+ ДанныеПрофиляДолжности.ФорматРаботы + Символы.ПС;
	
	ОплатаОт = ДанныеПрофиляДолжности.ОплатаТрудаОт;
	ОплатаДо = ДанныеПрофиляДолжности.ОплатаТрудаДо;
	ДоВычета = ДанныеПрофиляДолжности.ДоВычетаНалога;
	
	УсловияОплаты = "";
	
	Если ОплатаОт = 0 И ОплатаДо <> 0 Тогда
		УсловияОплаты = УсловияОплаты + "Оплата труда до: " + ОплатаДо + " рублей в месяц";
	ИначеЕсли ОплатаОт <> 0 И ОплатаДо = 0 Тогда
		УсловияОплаты = УсловияОплаты + "Оплата труда от: " + ОплатаОт + " рублей в месяц";
	ИначеЕсли ОплатаОт <> 0 И ОплатаДо <> 0 Тогда 
		УсловияОплаты = УсловияОплаты + "Оплата труда от: " + ОплатаОт + " до: " + ОплатаДо + " рублей в месяц";
	КонецЕсли;
	
	Если ДоВычета И (ОплатаОт <> 0 ИЛИ ОплатаДо <> 0) Тогда
		УсловияОплаты = УсловияОплаты + " (до вычета налога)" + Символы.ПС;
	ИначеЕсли НЕ ДоВычета И (ОплатаОт <> 0 ИЛИ ОплатаДо <> 0) Тогда 
		УсловияОплаты = УсловияОплаты + Символы.ПС;
	КонецЕсли;
	
	ТекстВакансии.Добавить(УсловияНачало + УсловияОплаты + ДанныеПрофиляДолжности.Условия + Символы.ПС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрофиляДолжности(ПрофильДолжности)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиДолжностей.ДолжностныеОбязанности КАК ДолжностныеОбязанности,
		|	ПрофилиДолжностей.Требования КАК Требования,
		|	ПрофилиДолжностей.Условия КАК Условия,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрофилиДолжностей.Образование) КАК Образование,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрофилиДолжностей.ОпытРаботы) КАК ОпытРаботы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрофилиДолжностей.ТипЗанятости) КАК ТипЗанятости,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрофилиДолжностей.ГрафикРаботы) КАК ГрафикРаботы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПрофилиДолжностей.ФорматРаботы) КАК ФорматРаботы,
		|	ПРЕДСТАВЛЕНИЕ(ПрофилиДолжностей.ОплатаТрудаОт) КАК ОплатаТрудаОт,
		|	ПРЕДСТАВЛЕНИЕ(ПрофилиДолжностей.ОплатаТрудаДо) КАК ОплатаТрудаДо,
		|	ПрофилиДолжностей.ДоВычетаНалога КАК ДоВычетаНалога
		|ИЗ
		|	Справочник.ПрофилиДолжностей КАК ПрофилиДолжностей
		|ГДЕ
		|	ПрофилиДолжностей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПрофильДолжности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеПрофиляДолжности = Новый Структура;
	ДанныеПрофиляДолжности.Вставить("Обязанности", Выборка.ДолжностныеОбязанности);
	ДанныеПрофиляДолжности.Вставить("Требования", Выборка.Требования);
    ДанныеПрофиляДолжности.Вставить("Условия", Выборка.Условия);
    ДанныеПрофиляДолжности.Вставить("Образование", "Образование: " + Выборка.Образование);
	ДанныеПрофиляДолжности.Вставить("ОпытРаботы", "Опыт работы: " + Выборка.ОпытРаботы);
	ДанныеПрофиляДолжности.Вставить("ТипЗанятости", "Тип занятости: " + Выборка.ТипЗанятости);
	ДанныеПрофиляДолжности.Вставить("ГрафикРаботы", "график работы: " + Выборка.ГрафикРаботы);
	ДанныеПрофиляДолжности.Вставить("ФорматРаботы", "Формат работы: " + Выборка.ФорматРаботы);
	ДанныеПрофиляДолжности.Вставить("ОплатаТрудаОт", Выборка.ОплатаТрудаОт);
	ДанныеПрофиляДолжности.Вставить("ОплатаТрудаДо", Выборка.ОплатаТрудаДо);
	ДанныеПрофиляДолжности.Вставить("ДоВычетаНалога", Выборка.ДоВычетаНалога);
	
	Возврат ДанныеПрофиляДолжности;
	
КонецФункции

&НаКлиенте
Асинх Процедура РазместитьНаСайтеУниверситета(Команда)
	
	ОчиститьСообщения();
	
	HTTPСоединение = Новый HTTPСоединение("taukpebkr3.temp.swtest.ru");
	HTTPЗапрос = Новый HTTPЗапрос("includes/post_vacancy.php");
	
	ДанныеВакансии = ПолучитьДанныеВакансии(); // JSON
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеВакансии);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Вакансия успешно размещена на сайте университета");
			Объект.ВакансияРазмещенаНаСайте = Истина;
			Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ПодменюКомандВакансииОбновление.ПодчиненныеЭлементы.ФормаОбновитьВакансиюНаСайтеУниверситета.Видимость = Истина;
		ИначеЕсли HTTPОтвет.КодСостояния = 400 И HTTPОтвет.Заголовки["Result"] <> Неопределено И HTTPОтвет.Заголовки["Result"] = "duplicate vacancy" Тогда 
			ОбщегоНазначенияКлиент.ВывестиСообщение("Эта вакансия уже размещена на сайте университета");
		ИначеЕсли HTTPОтвет.КодСостояния = 400 И HTTPОтвет.Заголовки["Result"] <> Неопределено И HTTPОтвет.Заголовки["Result"] = "incorrect data" Тогда 
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось разместить вакансию. Введены некорректные данные");	
		Иначе
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось разместить вакансию на сайте университета. Код ответа: " +  HTTPОтвет.КодСостояния);
		КонецЕсли;		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
			
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьДанныеВакансии()

	СведенияОВакансии = Новый Структура;
	СведенияОВакансии.Вставить("vacancy_title", Объект.НаименованиеВакансии);
	СведенияОВакансии.Вставить("education", Строка(Объект.Образование));
	СведенияОВакансии.Вставить("experience", Строка(Объект.ОпытРаботы));
	СведенияОВакансии.Вставить("type_of_employment", Строка(Объект.ТипЗанятости));
	СведенияОВакансии.Вставить("work_schedule", Строка(Объект.ГрафикРаботы));
	СведенияОВакансии.Вставить("work_format", Строка(Объект.ФорматРаботы));
	СведенияОВакансии.Вставить("vacancy_opening_date", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));
	СведенияОВакансии.Вставить("salary_from", Объект.ОплатаТрудаОт);
	СведенияОВакансии.Вставить("salary_up_to", Объект.ОплатаТрудаДо);
	СведенияОВакансии.Вставить("before_tax", Объект.ДоВычетаНалога);
	СведенияОВакансии.Вставить("vacancy_posted", Истина);
	СведенияОВакансии.Вставить("vacancy_number", Объект.Номер);
	
	ТекстHTML = "";
	СтруктураВложений = Новый Структура;
	ТекстВакансии.ПолучитьHTML(ТекстHTML, СтруктураВложений);
	СтильНачало = СтрНайти(ТекстHTML, "<style");
   	СтильКонец = СтрНайти(ТекстHTML,"</style>");
	СтильТекста = Сред(ТекстHTML, СтильНачало, СтильКонец - СтильНачало + 8);
	
	ТелоНачало = СтрНайти(ТекстHTML, "<body"); 
	ТелоКонец = СтрНайти(ТекстHTML, "</body>"); 
	ТелоВакансии = Сред(ТекстHTML, ТелоНачало, ТелоКонец - ТелоНачало + 7);	 
	
	СведенияОВакансии.Вставить("template_style_head", СтильТекста);
	СведенияОВакансии.Вставить("vacancy_template_body", ТелоВакансии);
		
	СтрокаJSON = ОбщегоНазначенияКлиент.ЗаписатьЗначениеВJSON(СведенияОВакансии);
	
	Возврат СтрокаJSON; 
	
КонецФункции

&НаКлиенте
Процедура РазместитьНаСайтеХХ(Команда)
		
	ОткрытьФорму("Обработка.ПубликацияВакансииНаХХ.Форма.Форма",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьВакансиюНаСайтеУниверситета(Команда)
	
	ОчиститьСообщения();
	
	HTTPСоединение = Новый HTTPСоединение("taukpebkr3.temp.swtest.ru");
	HTTPЗапрос = Новый HTTPЗапрос("includes/update_vacancy.php");
	
	ДанныеВакансии = ПолучитьДанныеВакансии(); // JSON
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеВакансии);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Вакансия успешно обновлена на сайте университета");
		ИначеЕсли HTTPОтвет.КодСостояния = 400 И HTTPОтвет.Заголовки["Result"] <> Неопределено И HTTPОтвет.Заголовки["Result"] = "no vacancy found" Тогда 
			ОбщегоНазначенияКлиент.ВывестиСообщение("Такая вакансия не найдена");
		ИначеЕсли HTTPОтвет.КодСостояния = 400 И HTTPОтвет.Заголовки["Result"] <> Неопределено И HTTPОтвет.Заголовки["Result"] = "incorrect data" Тогда 
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось обновить вакансию. Введены некорректные данные");	
		Иначе
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось обновить вакансию на сайте университета. Код ответа: " +  HTTPОтвет.КодСостояния);
		КонецЕсли;		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискКандидатовНаСайтеУниверситета(Команда)		
	ОткрытьФорму("Обработка.ЗагрузкаОткликовССайтаУниверситета.Форма",, ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКандидатовНаСайтеХХ(Команда)
	ОткрытьФорму("Обработка.ПоискИПросмотрРезюмеХХ.Форма",, ЭтотОбъект);	
КонецПроцедуры
