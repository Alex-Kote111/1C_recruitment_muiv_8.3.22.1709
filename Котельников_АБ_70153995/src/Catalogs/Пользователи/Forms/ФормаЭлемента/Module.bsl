
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ИмяТекущегоПользователя = ИмяПользователя();
	АдресРедиректа = Константы.АдресРедиректа.Получить();
	
	Если ТекущийПользователь.ИспользоватьСвоеПриложение Тогда
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Личное;
		НазваниеПриложенияХХ = ТекущийПользователь.НазваниеПриложенияХХ;
		ПочтаРазработчикаХХ = ТекущийПользователь.ПочтаРазработчикаХХ;
		ИдентификаторПриложенияХХ = ТекущийПользователь.ИдентификаторПриложенияХХ;
		СекретПриложенияХХ = ТекущийПользователь.СекретПриложенияХХ;		
	Иначе
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Общее;
		НазваниеПриложенияХХ = Константы.НазваниеПриложенияХХ.Получить();
		ПочтаРазработчикаХХ = Константы.ПочтаРазработчикаХХ.Получить();
		ИдентификаторПриложенияХХ = Константы.ИдентификаторПриложенияХХ.Получить();
		СекретПриложенияХХ = Константы.СекретПриложенияХХ.Получить();		
	КонецЕсли;
	
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененыДанныеПользователя",, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьСвоеПриложениеПриИзменении(Элемент)
	
	ИспользоватьСвоеПриложение = Объект.ИспользоватьСвоеПриложение;
	ОбщееПриложение = (ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Общее"));
	СвоеПриложение = (ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Личное"));
	
	Если (СвоеПриложение ИЛИ ОбщееПриложение) И ИспользоватьСвоеПриложение Тогда
		ОбновитьДанныеЛичногоПриложения();
	ИначеЕсли СвоеПриложение И НЕ ИспользоватьСвоеПриложение Тогда
		ОбновитьДанныеОбщегоПриложения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗапроситьКодАвторизацииПользователя(Команда)
	
	АдресАвторизацииНаХХ = "https://hh.ru/oauth/authorize";
		
	Если ПоказыватьФормуАвторизации Тогда
		СтрокаЗапроса = СтрШаблон("%1?force_login=true&response_type=code&client_id=%2&state=podbor_muiv_%3&redirect_uri=%4", АдресАвторизацииНаХХ, ИдентификаторПриложенияХХ, ИмяТекущегоПользователя, АдресРедиректа);
	Иначе
		СтрокаЗапроса = СтрШаблон("%1?skip_choose_account=true&response_type=code&client_id=%2&state=podbor_muiv_%3&redirect_uri=%4", АдресАвторизацииНаХХ, ИдентификаторПриложенияХХ, ИмяТекущегоПользователя, АдресРедиректа);
	КонецЕсли; 
	
	Попытка
		Ждать ЗапуститьПриложениеАсинх(СтрокаЗапроса);	
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьТокен(Команда)
	
	ОчиститьСообщения();

	ПолученКодАвторизации = Ждать ПолучениеКодаАвторизации();
	Если ПолученКодАвторизации <> Неопределено И НЕ ПолученКодАвторизации Тогда
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/token");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизацииПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	ТелоЗапроса = СтрШаблон("grant_type=authorization_code&client_id=%1&client_secret=%2&redirect_uri=%3&code=%4", ИдентификаторПриложенияХХ, СекретПриложенияХХ, АдресРедиректа, КодАвторизацииПользователя);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить токен. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());		
		ЗаписатьТокенПользователяВРегистр(Ответ, ТипИспользуемогоПриложения);
		ТокенПользователя = Ответ.access_token;
		ОбщегоНазначенияКлиент.ВывестиСообщение("Токен успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьТокен(Команда)
	
	ОчиститьСообщения();
	
	ДанныеСтарогоТокена = ПолучитьТокенОбновленияИзРегистра(ТипИспользуемогоПриложения);
	
	Если ДанныеСтарогоТокена.Свойство("ДатаИВремяОкончанияТокена") Тогда
		ДатаОкончанияДействия = Формат(ДанныеСтарогоТокена.ДатаИВремяОкончанияТокена, "ДЛФ=DDT"); 
		ОбщегоНазначенияКлиент.ВывестиСообщение("Срок действия текущего токена еще не истек. Дата окончания действия - " + ДатаОкончанияДействия);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтарогоТокена.ТокенОбновления) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Не найден старый токен. Получите новый.");
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/token");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ДанныеСтарогоТокена.СтарыйТокен);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	ТелоЗапроса = СтрШаблон("grant_type=refresh_token&refresh_token=%1", ДанныеСтарогоТокена.ТокенОбновления);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить токен. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());		
		ЗаписатьТокенПользователяВРегистр(Ответ, ТипИспользуемогоПриложения);
		ТокенПользователя = Ответ.access_token;
		ОбщегоНазначенияКлиент.ВывестиСообщение("Токен успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения)

	ОтборПользователя = Новый Структура("Пользователь, ТипПриложения", ПараметрыСеанса.ТекущийПользователь, ТипИспользуемогоПриложения);
	ТокенПользователя = РегистрыСведений.ТокеныПользователей.Получить(ОтборПользователя).Токен;

	Возврат ТокенПользователя; 

КонецФункции

&НаКлиенте
Асинх Функция ПолучениеКодаАвторизации()
	
	HTTPСоединение = Новый HTTPСоединение("taukpebkr3.temp.swtest.ru");
	
	СтрокаЗапроса = СтрШаблон("/includes/get_authorization_code_xx.php?username=%1", ИмяТекущегоПользователя);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса);
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Если Ответ.Количество() <> 0 Тогда
			КодАвторизацииПользователя = Ответ[0].authorization_code;
		Иначе
			ОбщегоНазначенияКлиент.ВывестиСообщение("Запросите код авторизации для получения токена");
		КонецЕсли;		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеЛичногоПриложения()
	
	ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Личное");
	НазваниеПриложенияХХ = Объект.НазваниеПриложенияХХ;
	ПочтаРазработчикаХХ = Объект.ПочтаРазработчикаХХ;
	ИдентификаторПриложенияХХ =Объект.ИдентификаторПриложенияХХ;
	СекретПриложенияХХ = Объект.СекретПриложенияХХ;
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбщегоПриложения()

	ДанныеОбщегоПриложения = ПолучитьДанныеОбщегоПриложения();
	
	ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Общее");
	НазваниеПриложенияХХ = ДанныеОбщегоПриложения.НазваниеПриложенияХХ;
	ПочтаРазработчикаХХ = ДанныеОбщегоПриложения.ПочтаРазработчикаХХ;
	ИдентификаторПриложенияХХ = ДанныеОбщегоПриложения.ИдентификаторПриложенияХХ;
	СекретПриложенияХХ = ДанныеОбщегоПриложения.СекретПриложенияХХ;
	АдресРедиректа = ДанныеОбщегоПриложения.АдресРедиректа;
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОбщегоПриложения()

	ДанныеОбщегоПриложения = Новый Структура;
	ДанныеОбщегоПриложения.Вставить("НазваниеПриложенияХХ", Константы.НазваниеПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("ПочтаРазработчикаХХ", Константы.ПочтаРазработчикаХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("ИдентификаторПриложенияХХ", Константы.ИдентификаторПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("СекретПриложенияХХ", Константы.СекретПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("АдресРедиректа", Константы.АдресРедиректа.Получить());
	ДанныеОбщегоПриложения.Вставить("ТокенПользователя", ПолучитьАктуальныйТокен(Перечисления.ТипыПриложенияХХ.Общее));
	
	Возврат ДанныеОбщегоПриложения; 

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьТокенПользователяВРегистр(ДанныеТокена, ТипИспользуемогоПриложения)
	
	Токен = ДанныеТокена.access_token;
	ВремяЖизниТокена = ДанныеТокена.expires_in;
	ТокенДляПродления = ДанныеТокена.refresh_token;
		
	НоваяЗапись = РегистрыСведений.ТокеныПользователей.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ТипПриложения = ТипИспользуемогоПриложения; 
	НоваяЗапись.Токен = Токен;
	НоваяЗапись.ВремяЖизниТокена = ВремяЖизниТокена;
	НоваяЗапись.ТокенДляПродления = ТокенДляПродления;
	НоваяЗапись.ДатаИВремяОкончанияТокена = ТекущаяДата() + ВремяЖизниТокена;
	НоваяЗапись.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенОбновленияИзРегистра(ТипИспользуемогоПриложения)

	ИнформацияОТокене = РегистрыСведений.ТокеныПользователей.СоздатьМенеджерЗаписи();
	ИнформацияОТокене.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ИнформацияОТокене.ТипПриложения = ТипИспользуемогоПриложения; 
	ИнформацияОТокене.Прочитать();  
	
	ДанныеСтарогоТокена = Новый Структура;
	
	Если ИнформацияОТокене.ДатаИВремяОкончанияТокена >= ТекущаяДата() Тогда
		ДанныеСтарогоТокена.Вставить("ДатаИВремяОкончанияТокена", ИнформацияОТокене.ДатаИВремяОкончанияТокена); 
		Возврат ДанныеСтарогоТокена;
	КонецЕсли;
			
	Если НЕ ИнформацияОТокене.Выбран() Тогда
		ДанныеСтарогоТокена.Вставить("ТокенОбновления", "");
		Возврат ДанныеСтарогоТокена;
	КонецЕсли; 
	
	ДанныеСтарогоТокена.Вставить("СтарыйТокен", ИнформацияОТокене.Токен);
	ДанныеСтарогоТокена.Вставить("ТокенОбновления", ИнформацияОТокене.ТокенДляПродления);
	
	Возврат ДанныеСтарогоТокена; 
	
КонецФункции

#КонецОбласти


