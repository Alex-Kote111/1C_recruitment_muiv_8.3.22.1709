
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПодразделениеПользователя = ПолучитьПодразделение(ТекущийПользователь);
	
	Если ТекущийПользователь.ИспользоватьСвоеПриложение Тогда
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Личное;
		НазваниеПриложенияХХ = ТекущийПользователь.НазваниеПриложенияХХ;
		ПочтаРазработчикаХХ = ТекущийПользователь.ПочтаРазработчикаХХ;
	Иначе
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Общее;
		НазваниеПриложенияХХ = Константы.НазваниеПриложенияХХ.Получить();
		ПочтаРазработчикаХХ = Константы.ПочтаРазработчикаХХ.Получить();	
	КонецЕсли;
			
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыДанныеПользователя" Тогда
		ИспользоватьСвоеПриложение = Источник.Объект.ИспользоватьСвоеПриложение;
		ОбщееПриложение = (ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Общее"));
		СвоеПриложение = (ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Личное"));
		
		Если (СвоеПриложение ИЛИ ОбщееПриложение) И ИспользоватьСвоеПриложение Тогда
			ОбновитьДанныеЛичногоПриложения(Источник);
		ИначеЕсли СвоеПриложение И НЕ ИспользоватьСвоеПриложение Тогда
			ОбновитьДанныеОбщегоПриложения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Асинх Процедура ПоискНавыкаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

	Если СтрДлина(СокрЛП(Текст)) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получить токен для поиска навыков");
		Возврат;
	КонецЕсли;
	
	СписокКлючевыхНавыков.Очистить();
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());	
	HTTPЗапрос = Новый HTTPЗапрос("/suggests/skill_set?text=" + Текст);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);	
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить подсказку по ключевым навыкам. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());	
		МассивНавыков = ОтветJSON["items"];
		МассивИдентификаторов = Новый Массив;
		Для Каждого Навык Из МассивНавыков Цикл
			МассивИдентификаторов.Добавить(Навык.id);	
		КонецЦикла;
		ДубликатыНавыков = ПолучитьДубликатыНавыков(МассивИдентификаторов);
		Для Каждого Навык Из МассивНавыков Цикл
			Если ДубликатыНавыков.Найти(Навык.id) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СписокКлючевыхНавыков.Добавить();
			НоваяСтрока.Навык = Навык.text;
			НоваяСтрока.ИдентификаторНавыка = Навык.id;
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКлючевыхНавыковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Навык = ТекущаяСтрока.Навык;
	ИдентификаторНавыка = ТекущаяСтрока.ИдентификаторНавыка;
	
	ДобавитьНавыкВСправочник(Навык, ИдентификаторНавыка, ПодразделениеПользователя);	
	СписокКлючевыхНавыков.Удалить(ТекущаяСтрока);
	
	ОбщегоНазначенияКлиент.ВывестиСообщение("Навык успешно добавлен");
	ОповеститьОбИзменении(Тип("СправочникСсылка.КлючевыеНавыки"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения)

	ОтборПользователя = Новый Структура("Пользователь, ТипПриложения", ПараметрыСеанса.ТекущийПользователь, ТипИспользуемогоПриложения);
	ТокенПользователя = РегистрыСведений.ТокеныПользователей.Получить(ОтборПользователя).Токен;

	Возврат ТокенПользователя; 

КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеЛичногоПриложения(Источник)
	
	ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Личное");
	НазваниеПриложенияХХ = Источник.Объект.НазваниеПриложенияХХ;
	ПочтаРазработчикаХХ = Источник.Объект.ПочтаРазработчикаХХ;
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбщегоПриложения()

	ДанныеОбщегоПриложения = ПолучитьДанныеОбщегоПриложения();
	
	ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Общее");
	НазваниеПриложенияХХ = ДанныеОбщегоПриложения.НазваниеПриложенияХХ;
	ПочтаРазработчикаХХ = ДанныеОбщегоПриложения.ПочтаРазработчикаХХ;
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОбщегоПриложения()

	ДанныеОбщегоПриложения = Новый Структура;
	ДанныеОбщегоПриложения.Вставить("НазваниеПриложенияХХ", Константы.НазваниеПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("ПочтаРазработчикаХХ", Константы.ПочтаРазработчикаХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("ТокенПользователя", ПолучитьАктуальныйТокен(Перечисления.ТипыПриложенияХХ.Общее));
	
	Возврат ДанныеОбщегоПриложения; 

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьНавыкВСправочник(Навык, ИдентификаторНавыка, ПодразделениеПользователя)

	НовыйНавык = Справочники.КлючевыеНавыки.СоздатьЭлемент();
	НовыйНавык.Наименование = Навык;
	НовыйНавык.ИдентификаторНавыкаХХ = ИдентификаторНавыка;
	НовыйНавык.Владелец = ПодразделениеПользователя;
	НовыйНавык.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодразделение(ТекущийПользователь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Сотрудник.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();

	Возврат Выборка.Подразделение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДубликатыНавыков(МассивИдентификаторов)

	ПодразделениеТекПользователя = ОбщегоНазначенияСервер.ПолучитьПодразделениеТекПользователя(ПараметрыСеанса.ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеНавыки.ИдентификаторНавыкаХХ КАК ИдентификаторНавыкаХХ
		|ИЗ
		|	Справочник.КлючевыеНавыки КАК КлючевыеНавыки
		|ГДЕ
		|	КлючевыеНавыки.ИдентификаторНавыкаХХ В(&МассивИдентификаторов)
		|	И КлючевыеНавыки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Запрос.УстановитьПараметр("Владелец", ПодразделениеТекПользователя);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	МассивДублей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивДублей.Добавить(Выборка.ИдентификаторНавыкаХХ);	
	КонецЦикла;
	
	Возврат МассивДублей;

КонецФункции

#КонецОбласти