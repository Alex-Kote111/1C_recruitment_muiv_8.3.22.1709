&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ТекущийПользователь.ИспользоватьСвоеПриложение Тогда
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Личное;
		НазваниеПриложения = ТекущийПользователь.НазваниеПриложенияХХ;
		ПочтаРазработчика = ТекущийПользователь.ПочтаРазработчикаХХ;
	Иначе
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Общее;
		НазваниеПриложения = Константы.НазваниеПриложенияХХ.Получить();
		ПочтаРазработчика = Константы.ПочтаРазработчикаХХ.Получить();
	КонецЕсли;
			
	ОтборПользователя = Новый Структура("Пользователь, ТипПриложения", ТекущийПользователь, ТипИспользуемогоПриложения);
	ТокенПользователя = РегистрыСведений.ТокеныПользователей.Получить(ОтборПользователя).Токен;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтобразитьРегионы(СписокСтран)
	ОчиститьСообщения();
	РегионыИГорода.ПолучитьЭлементы().Очистить();
	ОтобразитьРегионыНаСервере(СписокСтран);	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРегионыНаСервере(СписокСтран)

	ВсегоДоступныхЗначений = 0;
	Для Каждого Страна Из СписокСтран Цикл
		НаименованиеСтраны = Страна["name"];
		
		Если НаименованиеСтраны = "Россия" Тогда
			РегионыСтраны = Страна["areas"];
			Для Каждого Регион Из РегионыСтраны Цикл
				СписокГородов = Регион["areas"]; 
				НазваниеРегиона = Регион["name"];
				ИдентификаторРегиона = Регион["id"];
				
				Если НазваниеРегиона = "Москва" ИЛИ НазваниеРегиона = "Санкт-Петербург" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРегион = РегионыИГорода.ПолучитьЭлементы().Добавить();
				СтрокаРегион.Регион = НазваниеРегиона;
				СтрокаРегион.ИдентификаторЭлемента = ИдентификаторРегиона;
				ВсегоДоступныхЗначений = ВсегоДоступныхЗначений + 1;
				Для Каждого Город Из СписокГородов Цикл
					
					ИндентификаторГорода = Город["id"];
					СсылкаНаСправочник = Справочники.Города.НайтиПоРеквизиту("ИдентификаторГородаХХ", ИндентификаторГорода); 
					
					Если НЕ СсылкаНаСправочник.Пустая()  Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаГород = СтрокаРегион.ПолучитьЭлементы().Добавить();
					СтрокаГород.Город = Город["name"];	
					СтрокаГород.ИдентификаторЭлемента = ИндентификаторГорода; 					
					ВсегоДоступныхЗначений = ВсегоДоступныхЗначений + 1;
				КонецЦикла;								
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Асинх Процедура ПолучитьРегионы(Команда)

	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
			
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	HTTPЗапрос = Новый HTTPЗапрос("/areas?locale=RU");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложения + " (" + ПочтаРазработчика + ")");

	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос); 
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось найти регионы и города. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);
		ОтобразитьРегионы(ОтветJSON);	
		ОбщегоНазначенияКлиент.ВывестиСообщение("Список успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());	
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура РегионыИГородаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ВыбранныйГород = Элемент.ТекущиеДанные.Город;
	ИдентификаторГорода = Элемент.ТекущиеДанные.ИдентификаторЭлемента;
	
	Если ПустаяСтрока(ВыбранныйГород)  Тогда
		ВыбранныйРегион = Элемент.ТекущиеДанные.Регион;
		ДобавитьРегион(ВыбранныйРегион, Истина);		
	Иначе
		ВыбранныйРегион = Элемент.ТекущиеДанные.ПолучитьРодителя().Регион;		
		ДобавитьГород(ВыбранныйРегион, ВыбранныйГород, ИдентификаторГорода);
				
		ИдентификаторСтроки = Элементы.РегионыИГорода.ТекущаяСтрока;
		ТекущаяСтрока = РегионыИГорода.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		
		Если СтрокаРодитель = Неопределено Тогда
			РегионыИГорода.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		Иначе
			СтрокаРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		КонецЕсли;
		
		ВсегоДоступныхЗначений = ВсегоДоступныхЗначений - 1;			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьРегион(ВыбранныйРегион, СообщатьОДубликате = Ложь)

	СсылкаНаГруппу = Справочники.Города.НайтиПоНаименованию(ВыбранныйРегион) ;
	
	Если НЕ СсылкаНаГруппу.Пустая()  Тогда
		Если СообщатьОДубликате Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Такой регион уже есть в справочнике";
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НоваяГруппаРегион = Справочники.Города.СоздатьГруппу();
	НоваяГруппаРегион.Наименование = ВыбранныйРегион;
	НоваяГруппаРегион.Записать();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Регион успешно добавлен";
	Сообщение.Сообщить();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьГород(ВыбранныйРегион, ВыбранныйГород, ИдентификаторГорода)

	ДобавитьРегион(ВыбранныйРегион);
	
	СсылкаНаГород = Справочники.Города.НайтиПоРеквизиту("ИдентификаторГородаХХ", ИдентификаторГорода) ;
	СсылкаНаГруппу = Справочники.Города.НайтиПоНаименованию(ВыбранныйРегион) ;
	Если НЕ СсылкаНаГород.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Такой город уже есть";
		Сообщение.Сообщить();
	    Возврат;
	КонецЕсли; 
	
	НовыйГород = Справочники.Города.СоздатьЭлемент();
	НовыйГород.Наименование = ВыбранныйГород;
	НовыйГород.ИдентификаторГородаХХ = ИдентификаторГорода;
	НовыйГород.Родитель = СсылкаНаГруппу;
	НовыйГород.Записать();  
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Город успешно добавлен";
	Сообщение.Сообщить();
	
КонецПроцедуры


