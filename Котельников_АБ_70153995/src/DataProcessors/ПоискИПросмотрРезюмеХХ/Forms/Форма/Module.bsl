
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	
	АдресРедиректа = Константы.АдресРедиректа.Получить();
	ИмяТекущегоПользователя = ИмяПользователя();
	КоличествоЗаписейНаСтранице = 20;
	
	ОтборПользователя = Новый Структура("Пользователь", ТекущийПользователь);
	ТокенПользователя = РегистрыСведений.ТокеныПользователей.Получить(ОтборПользователя).Токен;
		
	Если ТекущийПользователь.ИспользоватьСвоеПриложение Тогда
		ИдентификаторПриложенияХХ = ТекущийПользователь.ИдентификаторПриложенияХХ;
		СекретПриложенияХХ = ТекущийПользователь.СекретПриложенияХХ;
		НазваниеПриложения = ТекущийПользователь.НазваниеПриложения;
		ПочтаРазработчика = ТекущийПользователь.ПочтаРазработчика;
	Иначе
		ИдентификаторПриложенияХХ = Константы.ИдентификаторПриложенияХХ.Получить();
		СекретПриложенияХХ = Константы.СекретПриложенияХХ.Получить();
		НазваниеПриложенияХХ = Константы.НазваниеПриложенияХХ.Получить();
		ПочтаРазработчикаХХ = Константы.ПочтаРазработчикаХХ.Получить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗапроситьКодАвторизацииПользователя(Команда)
	
	АдресАвторизацииНаХХ = "https://hh.ru/oauth/authorize";
		
	Если ПоказыватьФормуАвторизации Тогда
		СтрокаЗапроса = СтрШаблон("%1?force_login=true&response_type=code&client_id=%2&state=podbor_muiv_%3&redirect_uri=%4", АдресАвторизацииНаХХ, ИдентификаторПриложенияХХ, ИмяТекущегоПользователя, АдресРедиректа);
	Иначе
		СтрокаЗапроса = СтрШаблон("%1?skip_choose_account=true&response_type=code&client_id=%2&state=podbor_muiv_%3&redirect_uri=%4", АдресАвторизацииНаХХ, ИдентификаторПриложенияХХ, ИмяТекущегоПользователя, АдресРедиректа);
	КонецЕсли; 
	
	Попытка
		Ждать ЗапуститьПриложениеАсинх(СтрокаЗапроса);	
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьТокен(Команда)
	
	ОчиститьСообщения();

	ПолученКодАвторизации = Ждать ПолучениеКодаАвторизации();
	Если ПолученКодАвторизации <> Неопределено И НЕ ПолученКодАвторизации Тогда
		Возврат;
	КонецЕсли;
	
	// Получение токена
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/token");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизацииПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	ТелоЗапроса = СтрШаблон("grant_type=authorization_code&client_id=%1&client_secret=%2&redirect_uri=%3&code=%4", ИдентификаторПриложенияХХ, СекретПриложенияХХ, АдресРедиректа, КодАвторизацииПользователя);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить токен. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());		
		ЗаписатьТокенПользователяВРегистр(Ответ);
		ТокенПользователя = Ответ.access_token;
		ОбщегоНазначенияКлиент.ВывестиСообщение("Токен успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьТокен(Команда)
	
	ОчиститьСообщения();
	
	ДанныеСтарогоТокена = ПолучитьТокенОбновленияИзРегистра();
	
	Если ДанныеСтарогоТокена.Свойство("ДатаИВремяОкончанияТокена") Тогда
		ДатаОкончанияДействия = Формат(ДанныеСтарогоТокена.ДатаИВремяОкончанияТокена, "ДЛФ=DDT"); 
		ОбщегоНазначенияКлиент.ВывестиСообщение("Срок действия текущего токена еще не истек. Дата окончания действия - " + ДатаОкончанияДействия);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтарогоТокена.ТокенОбновления) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Не найден старый токен. Получите новый.");
		Возврат;
	КонецЕсли;
	
	// Получение токена
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/token");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ДанныеСтарогоТокена.СтарыйТокен);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	ТелоЗапроса = СтрШаблон("grant_type=refresh_token&refresh_token=%1", ДанныеСтарогоТокена.ТокенОбновления);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить токен. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());		
		ЗаписатьТокенПользователяВРегистр(Ответ);
		ТокенПользователя = Ответ.access_token;
		ОбщегоНазначенияКлиент.ВывестиСообщение("Токен успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенОбновленияИзРегистра()

	ИнформацияОТокене = РегистрыСведений.ТокеныПользователей.СоздатьМенеджерЗаписи();
	ИнформацияОТокене.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ИнформацияОТокене.Прочитать();  
	
	ДанныеСтарогоТокена = Новый Структура;
	
	Если ИнформацияОТокене.ДатаИВремяОкончанияТокена >= ТекущаяДата() Тогда
		ДанныеСтарогоТокена.Вставить("ДатаИВремяОкончанияТокена", ИнформацияОТокене.ДатаИВремяОкончанияТокена); 
		Возврат ДанныеСтарогоТокена;
	КонецЕсли;
			
	Если НЕ ИнформацияОТокене.Выбран() Тогда
		ДанныеСтарогоТокена.Вставить("ТокенОбновления", "");
		Возврат ДанныеСтарогоТокена;
	КонецЕсли; 
	
	ДанныеСтарогоТокена.Вставить("СтарыйТокен", ИнформацияОТокене.Токен);
	ДанныеСтарогоТокена.Вставить("ТокенОбновления", ИнформацияОТокене.ТокенДляПродления);
	
	Возврат ДанныеСтарогоТокена; 
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ЗаписатьТокенПользователяВРегистр(ДанныеТокена)
	
	Токен = ДанныеТокена.access_token;
	ВремяЖизниТокена = ДанныеТокена.expires_in;
	ТокенДляПродления = ДанныеТокена.refresh_token;	
	
	НоваяЗапись = РегистрыСведений.ТокеныПользователей.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.Токен = Токен;
	НоваяЗапись.ВремяЖизниТокена = ВремяЖизниТокена;
	НоваяЗапись.ТокенДляПродления = ТокенДляПродления;
	НоваяЗапись.ДатаИВремяОкончанияТокена = ТекущаяДата() + ВремяЖизниТокена;
	НоваяЗапись.Записать();
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ПолучениеКодаАвторизации()
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 3000);
	
	СтрокаЗапроса = СтрШаблон("/includes/get_authorization_code_xx.php?username=%1", ИмяТекущегоПользователя);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса);
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Если Ответ.Количество() <> 0 Тогда
			КодАвторизацииПользователя = Ответ[0].authorization_code;
		Иначе
			ОбщегоНазначенияКлиент.ВывестиСообщение("Запросите код авторизации для получения токена");
		КонецЕсли;		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
		
КонецФункции 

&НаКлиенте
Асинх Процедура НайтиРезюме(Команда)
		
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Необходимо получить токен");
		Возврат;
	КонецЕсли;
	
	СписокНайденныхРезюме.Очистить();
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	СтрокаЗапроса = СформироватьПараметрыРезюме();
	
	//HTTPЗапрос = Новый HTTPЗапрос("/resumes?text=php senior программист&text.logic=all&text.field=title&text.period=all_time"); 
		
	HTTPЗапрос = Новый HTTPЗапрос("/resumes" + СтрокаЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось найти резюме. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);
		
		НайденоРезультатов = Строка(ОтветJSON["found"]);
		ВсегоСтраниц = Строка(ОтветJSON["pages"]);
		
		МассивРезюме = ОтветJSON["items"]; 
		
		// alternate_url  - URL резюме на сайте +
		// id - Идентификатор резюме + 
		// title - Желаемая должность +
		// age - Возраст +
		// area - Город проживания  +
		// can_view_full_info - Доступен ли просмотр контактной информации в резюме текущему работодателю
		// certificate - Список сертификатов соискателя - добавлю в справочник "Соискатели" в ТЧ
		// created_at - Дата и время создания резюме +
		// download - Ссылка для скачивания резюме в pdf +
		// education - Образование соискателя +- (только уровень образования добавил)
		// first_name - Имя -
		// gender - Пол соискателя +
		// hidden_fields - Скрытые поля -
		// last_name - Фамилия -
		// marked - Выделено ли резюме в поиске -
		// middle_name - Отчество - 
		// platform - Ресурс, на котором было размещено резюме -
		// salary - Зарплата и валюта +
		// total_experience - Общий опыт работы в месяцах, с округлением до месяца +
		// updated_at - Дата и время обновления резюме +
		// actions - действия с резюме (ссылки для скачивания резюме с контактами или без) -
		// experience - Опыт работы подробный -
		// favorited - Добавлено ли резюме в избранные - 
		// negotiations_history - Краткая история откликов/приглашений по резюме -
		// owner - Информация о владельце резюме -
		// photo - Фотография пользователя -
		// tags - теги к резюме - 
		
		НомерСтроки = 0;
		
		Для каждого Резюме Из МассивРезюме Цикл		
			СтрокаСписка = СписокНайденныхРезюме.Добавить(); 
			НомерСтроки = НомерСтроки + 1;
			СтрокаСписка.НомерСтроки = НомерСтроки;
			
			СтрокаСписка.АдресРезюме 				= Резюме["alternate_url"];
			СтрокаСписка.ИдентификаторРезюме 		= Резюме["id"];
			СтрокаСписка.ЖелаемаяДолжность 			= Резюме["title"];		
			СтрокаСписка.Возраст 					= Резюме["age"];
			СтрокаСписка.ГородПроживания 			= Резюме["area"]["name"];
			СтрокаСписка.КонтактыДоступны 			= Резюме["can_view_full_info"];		
			ДатаСозданияРезюме 						= ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(Резюме["created_at"]);			
			СтрокаСписка.ДатаСозданияРезюме 		= ДатаСозданияРезюме;	
			СтрокаСписка.СсылкаНаСкачиваниеРезюме 	= Резюме["download"]["pdf"]["url"];
			СтрокаСписка.УровеньОБразования 		= Резюме["education"]["level"]["name"];
			СтрокаСписка.ПолСоискателя 				= Резюме["gender"]["name"];
			
			ОжидаемаяЗарплата = Резюме["salary"];
			Если Резюме.Получить("salary") <> Неопределено Тогда
				СтрокаСписка.ОжидаемаяЗарплата = Строка(ОжидаемаяЗарплата["amount"]) + " (" + ОжидаемаяЗарплата["currency"] + ")"; 
			КонецЕсли;
			
			ОпытРаботыСоискателя = Резюме["total_experience"];
			
			//Если ОпытРаботыСоискателя <> Неопределено И ОпытРаботы <> 0 Тогда
			Если ОпытРаботыСоискателя <> Неопределено Тогда	
				КоличествоОтработанныхЛет = Строка(Цел(ОпытРаботыСоискателя["months"] / 12));
				КоличествоОтработанныхМесяцев = Строка(ОпытРаботыСоискателя["months"] % 12);
				
				Если КоличествоОтработанныхМесяцев <> "0" Тогда
					СтрокаСписка.ОпытРаботыКолонка = КоличествоОтработанныхЛет + " лет " + КоличествоОтработанныхМесяцев + " месяцев"; 
				Иначе
					СтрокаСписка.ОпытРаботыКолонка = КоличествоОтработанныхЛет + " лет"
				КонецЕсли;
				
			КонецЕсли;				
			ДатаПоследнегоОбновления = ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(Резюме["updated_at"]);			
			СтрокаСписка.ПоследнееОбновление = ДатаПоследнегоОбновления;					
		КонецЦикла;		
		Всего = СписокНайденныхРезюме.Количество();	
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПараметрыРезюме()
			
	// Поисковая фраза
	СтрокаЗапроса = "?text=" + НаименованиеРезюме;
	
	// При использовании дополнительных text.* полей, необходимо указывать весь набор (триаду) параметров
	Если НЕ КакПроизводитсяПоиск.Пустая() И НЕ ГдеВстречаютсяСлова.Пустая() И НЕ ПериодОпытаРаботы.Пустая() Тогда
		Если КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ВсеСловаВстречаются") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=all";
		ИначеЕсли КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ЛюбоеИзСловВстречается") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=any";
		ИначеЕсли КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ТочнаяФразаВстречается") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=phrase";
		ИначеЕсли КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.НеВстречаются") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=except";
		КонецЕсли; 
		
		Если ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.Везде") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=everywhere";
		ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВНазванииРезюме") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=title";
		ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОбразовании") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=education";
		ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВКлючевыхНавыках") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=skills";
		ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОпытеРаботы") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=experience"; 
		ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВКомпанияхИОтраслях") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=experience_company"; 
        ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВДолжностях") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=experience_position";
		ИначеЕсли ГдеВстречаютсяСлова = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОбязанностях") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=experience_description"; 
		КонецЕсли;
		
		Если ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаВсеВремяОпыта") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.period=all_time";
		ИначеЕсли ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаПоследнийГод") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.period=last_year"; 
		ИначеЕсли ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаПоследниеТриГода") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.period=last_three_years";
		ИначеЕсли ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаПоследниеШестьЛет") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.period=last_six_years";
		КонецЕсли;
	КонецЕсли;
	
	// номер страницы
	СтрокаЗапроса = СтрокаЗапроса + "&page=" + Строка(НомерСтраницы);
	
	// количество записей на странице
	СтрокаЗапроса = СтрокаЗапроса  + "&per_page=" + Строка(КоличествоЗаписейНаСтранице);
	
	Если ВозрастНижняяГраница <> 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&age_from=" + Строка(ВозрастНижняяГраница);		
	КонецЕсли;
	
	Если ВозрастВерхняяГраница <> 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&age_to=" + Строка(ВозрастВерхняяГраница);		
	КонецЕсли;  
	
	Если ВсеРезюмеСУказаннымВозрастом Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&label=only_with_age";
	КонецЕсли; 
	
	Если ДатаНачалаРезюме <> Дата('00010101') Тогда 		
		СтрокаЗапроса = СтрокаЗапроса + "&date_from=" + Формат(ДатаНачалаРезюме, "ДФ=yyyy-MM-dd");	
	КонецЕсли; 
	
	Если ДатаКонцаРезюме <> Дата('00010101') Тогда 		
		СтрокаЗапроса = СтрокаЗапроса + "&date_to=" + Формат(ДатаКонцаРезюме, "ДФ=yyyy-MM-dd");	
	КонецЕсли;
	
	Если НЕ ТипЗанятостиСоискателя.Пустая() Тогда		
		СтрокаЗапроса = СтрокаЗапроса + ? (ТипЗанятостиСоискателя = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ПолнаяЗанятость"), "&employment=full", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ТипЗанятостиСоискателя = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ЧастичнаяЗанятость"), "&employment=part", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ТипЗанятостиСоискателя = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ПроектнаяРабота"), "&employment=project", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ТипЗанятостиСоискателя = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.Волонтерство"), "&employment=volunteer", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ТипЗанятостиСоискателя = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.Стажировка"), "&employment=probation", "");
	КонецЕсли;
	
	Если НЕ ОпытРаботы.Пустая() Тогда		
		СтрокаЗапроса = СтрокаЗапроса + ? (ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.НетОпыта"), "&experience=noExperience", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.ОтОдногоГодаДоТрехЛет"), "&experience=between1And3", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.ОтТрехДоШестиЛет"), "&experience=between3And6", "");
		СтрокаЗапроса = СтрокаЗапроса + ? (ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.БолееШестиЛет"), "&experience=moreThan6", "");
	КонецЕсли;
	
	Возврат СтрокаЗапроса; 
	
КонецФункции 

&НаКлиенте
Асинх Процедура ОткрытьРезюмеВБраузере(Команда)
	
	ОчиститьСообщения();
		
	ТекущаяСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные; 
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите резюме");
		Возврат;
	КонецЕсли;
	
	АдресРезюме = ТекущаяСтрокаТЧ.АдресРезюме;
	
	Ждать ЗапуститьПриложениеАсинх(АдресРезюме);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДобавитьКандидата(Команда)
	
	ОчиститьСообщения(); 
		
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные; 
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите резюме");
		Возврат;
	КонецЕсли; 
	
	РезультатПоиска = НайтиДубльКандидатаПоРезюме(ТекущаяСтрокаТЧ.АдресРезюме); 
	Если РезультатПоиска.НайденДубль Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Кандидат с таким резюме уже был добавлен. Код элемента - " + РезультатПоиска.КодКандидата);
		Возврат;
	КонецЕсли;
	
	ИдентификаторРезюме = ТекущаяСтрокаТЧ.ИдентификаторРезюме;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/resumes/" + ИдентификаторРезюме);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось добавить кандидата. Код ответа - " + HTTPОтвет.КодСостояния); 
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);	
		СозданиеЭлементаСправочникаКандидата(ОтветJSON);		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДубльКандидатаПоРезюме(АдресРезюме)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Код КАК Код
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.СсылкаНаРезюме ПОДОБНО &СсылкаНаРезюме";
	
	Запрос.УстановитьПараметр("СсылкаНаРезюме", АдресРезюме);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатПоиска = Новый Структура;
	Если РезультатЗапроса.Пустой() Тогда
		РезультатПоиска.Вставить("НайденДубль", Ложь);
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	РезультатПоиска.Вставить("НайденДубль", Истина);
	РезультатПоиска.Вставить("КодКандидата", Выборка.Код);
	
	Возврат РезультатПоиска;

КонецФункции

&НаКлиенте
Процедура СозданиеЭлементаСправочникаКандидата(ОтветJSON)
	
	ТекущаСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные;
		
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("ИсточникПривлечения", ПредопределенноеЗначение("Справочник.ИсточникиПривлечения.ХэдХантер"));
	ЗначенияРеквизитов.Вставить("СсылкаНаСкачиваниеРезюмеХХ", ТекущаСтрокаТЧ.СсылкаНаСкачиваниеРезюме);
	ЗначенияРеквизитов.Вставить("СсылкаНаРезюме", ТекущаСтрокаТЧ.АдресРезюме);
	
	ГородКандидата = ОтветJSON["area"];
	Если ГородКандидата <> Неопределено Тогда
		ГородКандидата = ОтветJSON["area"]["id"];	
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ГородПроживания", ГородКандидата);
	
	ЗначенияРеквизитов.Вставить("ДатаСозданияРезюме", ТекущаСтрокаТЧ.ДатаСозданияРезюме);
	ЗначенияРеквизитов.Вставить("ДатаПоследнегоОбновленияРезюме", ТекущаСтрокаТЧ.ПоследнееОбновление);
	ЗначенияРеквизитов.Вставить("ЖелаемаяДолжность", ОтветJSON["title"]);
	ЗначенияРеквизитов.Вставить("Возраст", ОтветJSON["age"]); 
	
	УровеньОбразования = ОтветJSON["education"]["level"];
	
	Если УровеньОбразования <> Неопределено Тогда  
		ЗначенияРеквизитов.Вставить("УровеньОбразованияКандидата", УровеньОбразования); 
	КонецЕсли;
		
	ПолКандидата = ОтветJSON["gender"]; 
	
	Если ПолКандидата <> Неопределено Тогда
		МужскойПол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
		ЖенскийПол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
		ПолКандидата = ?(ОтветJSON["gender"]["id"] = "male", МужскойПол, ЖенскийПол);
		ЗначенияРеквизитов.Вставить("Пол", ПолКандидата); 	
	КонецЕсли;
	
	ОжидаемаяЗарплата = ОтветJSON["salary"];
	
	Если ОжидаемаяЗарплата <> Неопределено Тогда 
		ЗначенияРеквизитов.Вставить("ОжидаемаяЗарплата", ОтветJSON["salary"]["amount"]);
	КонецЕсли;   
	
	ОбщийОпытКандидата = ОтветJSON["total_experience"];
	
	Если ОбщийОпытКандидата <> Неопределено Тогда	
		ОбщийОпытРаботыВМесяцах = ОтветJSON["total_experience"]["months"];		
		Если ОбщийОпытРаботыВМесяцах <> 0 Тогда
			КоличествоОтработанныхЛет = Цел(ОбщийОпытРаботыВМесяцах / 12);
			КоличествоОтработанныхМесяцев = Строка(ОбщийОпытРаботыВМесяцах % 12);
		КонецЕсли;     
	КонецЕсли;
	ЗначенияРеквизитов.Вставить("ОбщийОпытВГодах", КоличествоОтработанныхЛет);
	ЗначенияРеквизитов.Вставить("ОбщийОпытВМесяцах", КоличествоОтработанныхМесяцев);
		
	ЗначенияРеквизитов.Вставить("ОпытРаботы", ОтветJSON["experience"]);	

	ДеньРождения = ОтветJSON["birth_date"];	
	Если ДеньРождения <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("ДатаРождения", ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(ДеньРождения));	
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ЗнанияЯзыков", ОтветJSON["language"]);
		
	МетроКандидата = ОтветJSON["metro"];	
	Если МетроКандидата <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("СтанцияМетро", МетроКандидата["name"]);		
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ПодходящиеГрафикиРаботы", ОтветJSON["schedules"]);
	ЗначенияРеквизитов.Вставить("ПодходящиеТипыЗанятости", ОтветJSON["employments"]);

	ЗначенияРеквизитов.Вставить("ДополнительнаяИнформацияОСебе", ОтветJSON["skills"]);
	СписокКлючевыхНавыков = ОтветJSON["skill_set"];
	ЗначенияРеквизитов.Вставить("КлючевыеНавыки", СписокКлючевыхНавыков);		
		
	ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения", ЗначенияРеквизитов);	
	ОткрытьФорму("Справочник.Кандидаты.ФормаОбъекта", ПараметрыЗаполнения);
			
КонецПроцедуры

&НаКлиенте
Асинх Процедура СкачатьРезюмеКандидата(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные; 	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите резюме");
		Возврат;
	КонецЕсли;
	
	СсылкаНаРезюме = Сред(ТекущаяСтрокаТЧ.СсылкаНаСкачиваниеРезюме, 18);
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРезюме);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/pdf");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось скачать резюме. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ФайлПДФ = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
				
		Режим = РежимДиалогаВыбораФайла.Сохранение; 
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);              
		ДиалогСохраненияФайла.ПолноеИмяФайла = Лев(Строка(Вакансия), 18) + ТекущаяСтрокаТЧ.ЖелаемаяДолжность + "(" + Формат(ТекущаяСтрокаТЧ.ДатаСозданияРезюме, "ДЛФ=ДД") + "-" + Формат(ТекущаяСтрокаТЧ.ПоследнееОбновление, "ДЛФ=ДД") + ")" + ".pdf"; 
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь; 
		ДиалогСохраненияФайла.Заголовок = "Выберите место сохранения резюме";
		
		МестоСохранения = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();				
		Если МестоСохранения = Неопределено Тогда;
			 Возврат;
		КонецЕсли;
		 
		ПолныйПутьКФайлу = МестоСохранения[0];

		ЗаписьДанных = Новый ЗаписьДанных(ПолныйПутьКФайлу);
		Ждать ЗаписьДанных.ЗаписатьАсинх(ФайлПДФ);
		Ждать ЗаписьДанных.ЗакрытьАсинх(); 
				
		ОтветПользователя = Ждать ВопросАсинх("Открыть резюме после скачивания?", РежимДиалогаВопрос.ДаНет,,, "Открыть резюме"); 	
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ДокументPDF = Новый ДокументPDF();
		Ждать ДокументPDF.ПрочитатьАсинх(ПолныйПутьКФайлу);
		ДокументPDF.Показать("Резюме кандидата - " + ТекущаяСтрокаТЧ.ЖелаемаяДолжность);	
	Исключение 
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВакансияПриИзменении(Элемент)
	
	НаименованиеРезюме = ПолучитьНаименованиеВакансии();
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьНаименованиеВакансии()

	Возврат Вакансия.НаименованиеВакансии;	

КонецФункции

