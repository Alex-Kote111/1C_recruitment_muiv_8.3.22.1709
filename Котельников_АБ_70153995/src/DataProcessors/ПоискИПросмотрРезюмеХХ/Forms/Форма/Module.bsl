
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ИмяТекущегоПользователя = ИмяПользователя();
	АдресРедиректа = Константы.АдресРедиректа.Получить();
	
	Если ТекущийПользователь.ИспользоватьСвоеПриложение Тогда
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Личное;
		НазваниеПриложенияХХ = ТекущийПользователь.НазваниеПриложенияХХ;
		ПочтаРазработчикаХХ = ТекущийПользователь.ПочтаРазработчикаХХ;
		ИдентификаторПриложенияХХ = ТекущийПользователь.ИдентификаторПриложенияХХ;
		СекретПриложенияХХ = ТекущийПользователь.СекретПриложенияХХ;		
	Иначе
		ТипИспользуемогоПриложения = Перечисления.ТипыПриложенияХХ.Общее;
		НазваниеПриложенияХХ = Константы.НазваниеПриложенияХХ.Получить();
		ПочтаРазработчикаХХ = Константы.ПочтаРазработчикаХХ.Получить();
		ИдентификаторПриложенияХХ = Константы.ИдентификаторПриложенияХХ.Получить();
		СекретПриложенияХХ = Константы.СекретПриложенияХХ.Получить();		
	КонецЕсли;
	
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтотОбъект.ВладелецФормы <> Неопределено Тогда
		Вакансия = ЭтотОбъект.ВладелецФормы.Объект.Ссылка;
		НаименованиеРезюме = ЭтотОбъект.ВладелецФормы.Объект.НаименованиеВакансии;
	КонецЕсли;
	
	КоличествоЗаписейНаСтранице = 20;
	
	ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Города.Форма.ФормаВыбора" Тогда	
		МассивГородов = ПолучитьДанныеГорода(ВыбранноеЗначение);	
		Для Каждого Город Из МассивГородов Цикл
			НайденныеДубли = СписокГородов.НайтиСтроки(Новый Структура("ИдентификаторГородаХХ", Город.ИдентификаторГорода));
			Если Город.ЭтоГруппа Тогда
				Если НайденныеДубли.Количество() <> 0 Тогда
					ОбщегоНазначенияКлиент.ВывестиСообщение("Регион - """ + Строка(Город.Наименование) + """ уже был выбран");
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СписокГородов.Добавить();
				НоваяСтрока.Город = Город.Наименование + " (Регион)";
				НоваяСтрока.ИдентификаторГородаХХ = Город.ИдентификаторГорода;
			Иначе
				Если НайденныеДубли.Количество() <> 0 Тогда
					ОбщегоНазначенияКлиент.ВывестиСообщение("Город - """ + Строка(Город.Наименование) + """ уже был выбран");
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СписокГородов.Добавить();
				НоваяСтрока.Город = Город.Наименование;
				НоваяСтрока.ИдентификаторГородаХХ = Город.ИдентификаторГорода;
			КонецЕсли;
		КонецЦикла;
		ИзменитьЗаголовокГруппы(СписокГородов, Элементы.ГруппаПодборГорода, "Город", "Место проживания", ИспользоватьМестоПроживания);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.СтатусыПоискаРаботы.ФормаВыбора" Тогда
		ДобавитьЗаписьВПараметр(СписокСтатусовПоискаРаботы, "Статус", ВыбранноеЗначение, "Статус");
		ИзменитьЗаголовокГруппы(СписокСтатусовПоискаРаботы, Элементы.ГруппаСтатусПоискаРаботы, "Статус", "Статус поиска работу", ИспользоватьСтатусПоискаРаботы);		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ГрафикиРаботы.ФормаВыбора" Тогда
		ДобавитьЗаписьВПараметр(СписокГрафиковРаботы, "ГрафикРаботы", ВыбранноеЗначение, "График работы");
		ИзменитьЗаголовокГруппы(СписокГрафиковРаботы, Элементы.ГруппаПодборГрафикаРаботы, "ГрафикРаботы", "График работы", ИспользоватьГрафикРаботы);	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ТипыЗанятости.ФормаВыбора" Тогда
		ДобавитьЗаписьВПараметр(СписокТиповЗанятости, "ТипЗанятости", ВыбранноеЗначение, "Тип занятости");
		ИзменитьЗаголовокГруппы(СписокТиповЗанятости, Элементы.ГруппаПодборТипаЗанятости, "ТипЗанятости", "Тип занятости", ИспользоватьТипЗанятости);		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ОпытРаботы.ФормаВыбора" Тогда
		ДобавитьЗаписьВПараметр(СписокВариантовОпытаРаботы, "ОпытРаботы", ВыбранноеЗначение, "Опыт работы");
		ИзменитьЗаголовокГруппы(СписокВариантовОпытаРаботы, Элементы.ГруппаПодборОпытаРаботы, "ОпытРаботы", "Опыт работы", ИспользоватьОпытРаботы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыДополнительногоФильтра.ФормаВыбора" Тогда
		ДобавитьЗаписьВПараметр(СписокВариантовДополнительногоФильтра, "Фильтр", ВыбранноеЗначение, "Фильтр");
		ИзменитьЗаголовокГруппы(СписокВариантовДополнительногоФильтра, Элементы.ГруппаДополнительныеФильтрыПодбор, "Фильтр", "Дополнительный фильтр", ИспользоватьДопФильтр);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СтанцииМетро.Форма.ФормаВыбора" Тогда
		МассивСтанций = ПолучитьДанныеСтанции(ВыбранноеЗначение);
		Для Каждого Станция Из МассивСтанций Цикл
			НайденныеДубли = СписокСтанцийМетро.НайтиСтроки(Новый Структура("ИдентификаторСтанцииХХ", Станция.ИдентификаторСтанции));
			Если Станция.ЭтоГруппа Тогда
				Если НайденныеДубли.Количество() <> 0 Тогда
					ОбщегоНазначенияКлиент.ВывестиСообщение("Линия метро - """ + Строка(Станция.Наименование) + """ уже была выбрана");
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СписокСтанцийМетро.Добавить();
				НоваяСтрока.Станция = Станция.Наименование + " (Линия)";
				НоваяСтрока.ИдентификаторСтанцииХХ = Станция.ИдентификаторСтанции;			
			Иначе
				Если НайденныеДубли.Количество() <> 0 Тогда
					ОбщегоНазначенияКлиент.ВывестиСообщение("Станция метро - """ + Строка(Станция.Наименование) + """ уже была выбрана");
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СписокСтанцийМетро.Добавить();
				НоваяСтрока.Станция = Станция.Наименование;
				НоваяСтрока.ИдентификаторСтанцииХХ = Станция.ИдентификаторСтанции;		
			КонецЕсли;
		КонецЦикла;
		ИзменитьЗаголовокГруппы(СписокСтанцийМетро, Элементы.ГруппаПодборСтанцииМетро, "Станция", "Метро", ИспользоватьСтанциюМетро);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.УровниОбразования.ФормаВыбора" Тогда
		ДобавитьЗаписьВПараметр(СписокУровнейОбразования, "Образование", ВыбранноеЗначение, "Уровень образования");
		ИзменитьЗаголовокГруппы(СписокУровнейОбразования, Элементы.ГруппаПодборОбразования, "Образование", "Образование", ИспользоватьОбразование);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Языки.ФормаВыбора" Тогда
		ДанныеЯзыка = ПолучитьДанныеЯзыка(ВыбранноеЗначение);
		НайденныеДубли = СписокЯзыков.НайтиСтроки(Новый Структура("ИдентификаторЯзыка", ДанныеЯзыка.ИдентификаторЯзыка));
		Если НайденныеДубли.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Язык - """ + Строка(ДанныеЯзыка.НаименованиеЯзыка) + """ уже был выбран");
			Возврат;
		КонецЕсли;
		НоваяСтрока = СписокЯзыков.Добавить();
		НоваяСтрока.Язык = ДанныеЯзыка.НаименованиеЯзыка;
		НоваяСтрока.ИдентификаторЯзыка = ДанныеЯзыка.ИдентификаторЯзыка;	
		ИзменитьЗаголовокГруппы(СписокЯзыков, Элементы.ГруппаПодборЯзыков, "Язык", "Знание языков", ИспользоватьЯзык);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.МестаВстречиСлов.ФормаВыбора" Тогда
		НайденныеДубли = СписокМестВстречиСлов.НайтиСтроки(Новый Структура("МестоВстречиСлов", ВыбранноеЗначение));
		Если НайденныеДубли.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Вариант места встречи слов - """ + Строка(ВыбранноеЗначение) + """ уже был выбран");
			Возврат;
		КонецЕсли;
		
		ВОпытеРаботы = ?(ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОпытеРаботы"), Истина, Ложь);
		ВКомпанияхИОтраслях = ?(ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВКомпанияхИОтраслях"), Истина, Ложь);
		ВДолжностях = ?(ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВДолжностях"), Истина, Ложь);
		ВОбязанностях = ?(ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОбязанностях"), Истина, Ложь);
		Если ВОпытеРаботы ИЛИ ВКомпанияхИОтраслях ИЛИ ВДолжностях ИЛИ ВОбязанностях Тогда
			ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаВсеВремяОпыта");
			РазмерКомпании = ПредопределенноеЗначение("Перечисление.ВариантыРазмераКомпании.ЛюбойРазмер");
		КонецЕсли;
		
		НоваяСтрока = СписокМестВстречиСлов.Добавить();
		НоваяСтрока.МестоВстречиСлов = ВыбранноеЗначение;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.КлючевыеНавыки.ФормаВыбора" Тогда
		МассивНавыков = ПолучитьДанныеНавыков(ВыбранноеЗначение);
		Для Каждого Навык Из МассивНавыков Цикл
			НайденныеДубли = СписокКлючевыхНавыков.НайтиСтроки(Новый Структура("ИдентификаторНавыка", Навык.ИдентификаторНавыка));
			Если НайденныеДубли.Количество() <> 0 Тогда
				ОбщегоНазначенияКлиент.ВывестиСообщение("Навык - """ + Строка(Навык.НаименованиеНавыка) + """ уже был выбран");
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СписокКлючевыхНавыков.Добавить();
			НоваяСтрока.Навык = Навык.НаименованиеНавыка;
			НоваяСтрока.ИдентификаторНавыка = Навык.ИдентификаторНавыка;
		КонецЦикла;
		ИзменитьЗаголовокГруппы(СписокКлючевыхНавыков, Элементы.ГруппаПодборКлючевыхНавыков, "Навык", "Ключевые навыки", ИспользоватьКлючевыеНавыки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "ИзмененыДанныеПользователя" Тогда
		ИспользоватьСвоеПриложение = Источник.Объект.ИспользоватьСвоеПриложение;
		ОбщееПриложение = (ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Общее"));
		СвоеПриложение = (ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Личное"));
		
		Если (СвоеПриложение ИЛИ ОбщееПриложение) И ИспользоватьСвоеПриложение Тогда
			ОбновитьДанныеЛичногоПриложения(Источник);
		ИначеЕсли СвоеПриложение И НЕ ИспользоватьСвоеПриложение Тогда
			ОбновитьДанныеОбщегоПриложения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВакансияПриИзменении(Элемент)
	
	НаименованиеРезюме = ПолучитьНаименованиеВакансии(Вакансия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокГородовПослеУдаления(Элемент)	
	ИзменитьЗаголовокГруппы(СписокГородов, Элементы.ГруппаПодборГорода, "Город", "Место проживания", ИспользоватьМестоПроживания);		
КонецПроцедуры

&НаКлиенте
Процедура СтатусПоискаРаботыПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокСтатусовПоискаРаботы, Элементы.ГруппаСтатусПоискаРаботы, "Статус", "Статус поиска работу", ИспользоватьСтатусПоискаРаботы);
КонецПроцедуры

&НаКлиенте
Процедура СписокГрафиковРаботыПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокГрафиковРаботы, Элементы.ГруппаПодборГрафикаРаботы, "ГрафикРаботы", "График работы", ИспользоватьГрафикРаботы);
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповЗанятостиПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокТиповЗанятости, Элементы.ГруппаПодборТипаЗанятости, "ТипЗанятости", "Тип занятости", ИспользоватьТипЗанятости);
КонецПроцедуры

&НаКлиенте
Процедура СписокВариантовОпытаРаботыПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокВариантовОпытаРаботы, Элементы.ГруппаПодборОпытаРаботы, "ОпытРаботы", "Опыт работы", ИспользоватьОпытРаботы);	
КонецПроцедуры

&НаКлиенте
Процедура СписокВариантовДополнительногоФильтраПослеУдаления(Элемент)	
	ИзменитьЗаголовокГруппы(СписокВариантовДополнительногоФильтра, Элементы.ГруппаДополнительныеФильтрыПодбор, "Фильтр", "Дополнительный фильтр", ИспользоватьДопФильтр);
КонецПроцедуры

&НаКлиенте
Процедура СписокСтанцияМетроПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокСтанцийМетро, Элементы.ГруппаПодборСтанцииМетро, "Станция", "Метро", ИспользоватьСтанциюМетро);	
КонецПроцедуры

&НаКлиенте
Процедура СписокУровнейОбразованияПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокУровнейОбразования, Элементы.ГруппаПодборОбразования, "Образование", "Образование", ИспользоватьОбразование);	
КонецПроцедуры

&НаКлиенте
Процедура СписокЯзыковПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокЯзыков, Элементы.ГруппаПодборЯзыков, "Язык", "Знание языков", ИспользоватьЯзык);
КонецПроцедуры

&НаКлиенте
Процедура СписокМестВстречиСловПослеУдаления(Элемент)
	
	НайденОпытРаботы = Ложь;
	Для Каждого СтрокаТЗ Из СписокМестВстречиСлов Цикл		
		Если СтрокаТЗ.МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОпытеРаботы") Тогда
			НайденОпытРаботы = Истина;
		ИначеЕсли СтрокаТЗ.МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВКомпанияхИОтраслях") Тогда
			НайденОпытРаботы = Истина;
		ИначеЕсли СтрокаТЗ.МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВДолжностях") Тогда
			НайденОпытРаботы = Истина;
		ИначеЕсли СтрокаТЗ.МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОбязанностях") Тогда
			НайденОпытРаботы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденОпытРаботы Тогда
		ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ПустаяСсылка");
		РазмерКомпании = ПредопределенноеЗначение("Перечисление.ВариантыРазмераКомпании.ПустаяСсылка");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Асинх Процедура НаименованиеРезюмеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Не ВключитьПодсказкуВвода Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	
	Текст = СокрЛ(Текст);
	
	Если СтрДлина(СокрЛП(Текст)) < 2 ИЛИ Прав(Текст, 1) <> " " Тогда
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());	
	HTTPЗапрос = Новый HTTPЗапрос("/suggests/resume_search_keyword?text=" + Текст);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);	
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить подсказку по ключевым словам. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);
		
		МассивПодсказок = ОтветJSON["items"];
		
		Для Каждого Подсказка Из МассивПодсказок Цикл
			Элемент.СписокВыбора.Добавить(Подсказка["text"]);
		КонецЦикла;
		Результат = Ждать ВыбратьИзМенюАсинх(Элемент.СписокВыбора, Элемент);
		Если Результат <> Неопределено Тогда 
			НаименованиеРезюме = Результат;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКлючевыхНавыковПослеУдаления(Элемент)	
	ИзменитьЗаголовокГруппы(СписокКлючевыхНавыков, Элементы.ГруппаПодборКлючевыхНавыков, "Навык", "Ключевые навыки", ИспользоватьКлючевыеНавыки);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗапроситьКодАвторизацииПользователя(Команда)
	
	АдресАвторизацииНаХХ = "https://hh.ru/oauth/authorize";
		
	Если ПоказыватьФормуАвторизации Тогда
		СтрокаЗапроса = СтрШаблон("%1?force_login=true&response_type=code&client_id=%2&state=podbor_muiv_%3&redirect_uri=%4", АдресАвторизацииНаХХ, ИдентификаторПриложенияХХ, ИмяТекущегоПользователя, АдресРедиректа);
	Иначе
		СтрокаЗапроса = СтрШаблон("%1?skip_choose_account=true&response_type=code&client_id=%2&state=podbor_muiv_%3&redirect_uri=%4", АдресАвторизацииНаХХ, ИдентификаторПриложенияХХ, ИмяТекущегоПользователя, АдресРедиректа);
	КонецЕсли; 
	
	Попытка
		Ждать ЗапуститьПриложениеАсинх(СтрокаЗапроса);	
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьТокен(Команда)
	
	ОчиститьСообщения();

	ПолученКодАвторизации = Ждать ПолучениеКодаАвторизации();
	Если ПолученКодАвторизации <> Неопределено И НЕ ПолученКодАвторизации Тогда
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/token");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизацииПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	ТелоЗапроса = СтрШаблон("grant_type=authorization_code&client_id=%1&client_secret=%2&redirect_uri=%3&code=%4", ИдентификаторПриложенияХХ, СекретПриложенияХХ, АдресРедиректа, КодАвторизацииПользователя);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить токен. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());		
		ЗаписатьТокенПользователяВРегистр(Ответ, ТипИспользуемогоПриложения);
		ТокенПользователя = Ответ.access_token;
		ОбщегоНазначенияКлиент.ВывестиСообщение("Токен успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьТокен(Команда)
	
	ОчиститьСообщения();
	
	ДанныеСтарогоТокена = ПолучитьТокенОбновленияИзРегистра(ТипИспользуемогоПриложения);
	
	Если ДанныеСтарогоТокена.Свойство("ДатаИВремяОкончанияТокена") Тогда
		ДатаОкончанияДействия = Формат(ДанныеСтарогоТокена.ДатаИВремяОкончанияТокена, "ДЛФ=DDT"); 
		ОбщегоНазначенияКлиент.ВывестиСообщение("Срок действия текущего токена еще не истек. Дата окончания действия - " + ДатаОкончанияДействия);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтарогоТокена.ТокенОбновления) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Не найден старый токен. Получите новый.");
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru",,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/token");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ДанныеСтарогоТокена.СтарыйТокен);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	ТелоЗапроса = СтрШаблон("grant_type=refresh_token&refresh_token=%1", ДанныеСтарогоТокена.ТокенОбновления);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось получить токен. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());		
		ЗаписатьТокенПользователяВРегистр(Ответ, ТипИспользуемогоПриложения);
		ТокенПользователя = Ответ.access_token;
		ОбщегоНазначенияКлиент.ВывестиСообщение("Токен успешно получен");
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НайтиРезюме(Команда)
		
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Необходимо получить токен");
		Возврат;
	КонецЕсли;
	
	СписокНайденныхРезюме.Очистить();
	СтрокаЗапроса = СформироватьПараметрыРезюме();
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());	
	HTTPЗапрос = Новый HTTPЗапрос("/resumes" + СтрокаЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось найти резюме. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);
		
		НайденоРезультатов = Строка(ОтветJSON["found"]);
		ВсегоСтраниц = Строка(ОтветJSON["pages"]);		
		МассивРезюме = ОтветJSON["items"]; 			
		НомерСтроки = 0;
		
		Для каждого Резюме Из МассивРезюме Цикл		
			СтрокаСписка = СписокНайденныхРезюме.Добавить(); 
			НомерСтроки = НомерСтроки + 1;
			СтрокаСписка.НомерСтроки = НомерСтроки;
			
			СтрокаСписка.АдресРезюме 				= Резюме["alternate_url"];
			СтрокаСписка.ИдентификаторРезюме 		= Резюме["id"];
			СтрокаСписка.ЖелаемаяДолжность 			= Резюме["title"];		
			СтрокаСписка.Возраст 					= Резюме["age"];
			СтрокаСписка.ГородПроживания 			= Резюме["area"]["name"];
			СтрокаСписка.КонтактыДоступны 			= Резюме["can_view_full_info"];		
			ДатаСозданияРезюме 						= ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(Резюме["created_at"]);			
			СтрокаСписка.ДатаСозданияРезюме 		= ДатаСозданияРезюме;	
			СтрокаСписка.СсылкаНаСкачиваниеРезюме 	= Резюме["download"]["pdf"]["url"];
			СтрокаСписка.УровеньОБразования 		= Резюме["education"]["level"]["name"];
			СтрокаСписка.РезюмеПросмотрено			= Резюме["viewed"];
			СтрокаСписка.ГотовКоВременнойРаботе		= Резюме["ready_for_temporary_job"];
			
			Если Резюме["job_search_status"] <> Неопределено Тогда
				СтрокаСписка.СтатусПоискаКандидата = Резюме["job_search_status"]["name"];
				СтрокаСписка.ВремяПоследнегоИзмененияСтатуса = ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(Резюме["job_search_status"]["last_change_time"]);
			КонецЕсли;
			
			Если Резюме["gender"] <> Неопределено Тогда 
				СтрокаСписка.ПолСоискателя = Резюме["gender"]["name"];
			КонецЕсли;
			
			ОжидаемаяЗарплата = Резюме["salary"];
			Если Резюме.Получить("salary") <> Неопределено Тогда
				СтрокаСписка.ОжидаемаяЗарплата = Строка(ОжидаемаяЗарплата["amount"]) + " (" + ОжидаемаяЗарплата["currency"] + ")"; 
			КонецЕсли;
			
			ОпытРаботыСоискателя = Резюме["total_experience"];
			
			Если ОпытРаботыСоискателя <> Неопределено Тогда	
				КоличествоОтработанныхЛет = Строка(Цел(ОпытРаботыСоискателя["months"] / 12));
				КоличествоОтработанныхМесяцев = Строка(ОпытРаботыСоискателя["months"] % 12);
				
				Если КоличествоОтработанныхМесяцев <> "0" Тогда
					СтрокаСписка.ОпытРаботыКолонка = КоличествоОтработанныхЛет + " лет " + КоличествоОтработанныхМесяцев + " месяцев"; 
				Иначе
					СтрокаСписка.ОпытРаботыКолонка = КоличествоОтработанныхЛет + " лет"
				КонецЕсли;
				
			КонецЕсли;				
			ДатаПоследнегоОбновления = ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(Резюме["updated_at"]);			
			СтрокаСписка.ПоследнееОбновление = ДатаПоследнегоОбновления;					
		КонецЦикла;		
		Всего = СписокНайденныхРезюме.Количество();	
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьРезюмеВБраузере(Команда)
	
	ОчиститьСообщения();
		
	ТекущаяСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные; 
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите резюме");
		Возврат;
	КонецЕсли;
	
	АдресРезюме = ТекущаяСтрокаТЧ.АдресРезюме;	
	Ждать ЗапуститьПриложениеАсинх(АдресРезюме);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДобавитьКандидата(Команда)
	
	ОчиститьСообщения(); 
		
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные; 
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите резюме");
		Возврат;
	КонецЕсли; 
	
	РезультатПоиска = НайтиДубльКандидатаПоРезюме(ТекущаяСтрокаТЧ.АдресРезюме); 
	Если РезультатПоиска.НайденДубль Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Кандидат с таким резюме уже был добавлен. Код элемента - " + РезультатПоиска.КодКандидата);
		Возврат;
	КонецЕсли;
	
	ИдентификаторРезюме = ТекущаяСтрокаТЧ.ИдентификаторРезюме;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("/resumes/" + ИдентификаторРезюме);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось добавить кандидата. Код ответа - " + HTTPОтвет.КодСостояния); 
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);	
		СозданиеЭлементаСправочникаКандидата(ОтветJSON);		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СкачатьРезюмеКандидата(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные; 	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите резюме");
		Возврат;
	КонецЕсли;
	
	СсылкаНаРезюме = Сред(ТекущаяСтрокаТЧ.СсылкаНаСкачиваниеРезюме, 18);
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРезюме);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/pdf");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось скачать резюме. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ФайлПДФ = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
				
		Режим = РежимДиалогаВыбораФайла.Сохранение; 
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);              
		ДиалогСохраненияФайла.ПолноеИмяФайла = Лев(Строка(Вакансия), 19) + ТекущаяСтрокаТЧ.ЖелаемаяДолжность + "(" + Формат(ТекущаяСтрокаТЧ.ДатаСозданияРезюме, "ДЛФ=ДД") + "-" + Формат(ТекущаяСтрокаТЧ.ПоследнееОбновление, "ДЛФ=ДД") + ")" + ".pdf"; 
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь; 
		ДиалогСохраненияФайла.Заголовок = "Выберите место сохранения резюме";
		
		МестоСохранения = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();				
		Если МестоСохранения = Неопределено Тогда;
			 Возврат;
		КонецЕсли;
		 
		ПолныйПутьКФайлу = МестоСохранения[0];	
		Ждать ФайлПДФ.ЗаписатьАсинх(ПолныйПутьКФайлу);
			
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("ОткрытьЗдесь", "Открыть в 1С");
		КнопкиВопроса.Добавить("ОткрытьВБраузере", "Открыть в браузере");
		КнопкиВопроса.Добавить("Нет");
		
		ОтветПользователя = Ждать ВопросАсинх("Открыть резюме после скачивания?", КнопкиВопроса,, "Нет", "Открыть резюме");
		
		Если ОтветПользователя = "ОткрытьЗдесь" Тогда
			ДокументPDF = Новый ДокументPDF();
			Ждать ДокументPDF.ПрочитатьАсинх(ПолныйПутьКФайлу);					
			ДокументPDF.Показать("Резюме кандидата - " + ТекущаяСтрокаТЧ.ЖелаемаяДолжность);
		ИначеЕсли ОтветПользователя = "ОткрытьВБраузере" Тогда
			Ждать ЗапуститьПриложениеАсинх(ПолныйПутьКФайлу);
		КонецЕсли	
	Исключение 
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьГород(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, ФиксированныеНастройки", Ложь, Истина, ПолучитьНастройкиОтбора("ИдентификаторГородаХХ"));	
	ОткрытьФорму("Справочник.Города.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокГородов(Команда)
	СписокГородов.Очистить();
	ИзменитьЗаголовокГруппы(СписокГородов, Элементы.ГруппаПодборГорода, "Город", "Место проживания", ИспользоватьМестоПроживания);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСтатусПоискаРаботы(Команда)
	
 	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.СтатусыПоискаРаботы.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьГрафикРаботы(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.ГрафикиРаботы.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТипЗанятости(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.ТипыЗанятости.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОпытРаботы(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.ОпытРаботы.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФильтр(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе ", Ложь);	
	ОткрытьФорму("Перечисление.ВариантыДополнительногоФильтра.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСтанциюМетро(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, ФиксированныеНастройки", Ложь, Истина, ПолучитьНастройкиОтбора("ИдентификаторСтанцииХХ"));	
	ОткрытьФорму("Справочник.СтанцииМетро.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокМетро(Команда)
	
	СписокСтанцийМетро.Очистить();
	ИзменитьЗаголовокГруппы(СписокСтанцийМетро, Элементы.ГруппаПодборСтанцииМетро, "Станция", "Метро", ИспользоватьСтанциюМетро);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОбразование(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.УровниОбразования.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЯзык(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, ФиксированныеНастройки", Ложь, ПолучитьНастройкиОтбора("ИдентификаторЯзыкаХХ"));	
	ОткрытьФорму("Справочник.Языки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМестоВстречиСлов(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.МестаВстречиСлов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНавык(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, ФиксированныеНастройки", Ложь, Истина, ПолучитьНастройкиОтбора("ИдентификаторНавыкаХХ"));	
	ОткрытьФорму("Справочник.КлючевыеНавыки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокНавыков(Команда)
	СписокКлючевыхНавыков.Очистить();
	ИзменитьЗаголовокГруппы(СписокКлючевыхНавыков, Элементы.ГруппаПодборКлючевыхНавыков, "Навык", "Ключевые навыки", ИспользоватьКлючевыеНавыки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения)

	ОтборПользователя = Новый Структура("Пользователь, ТипПриложения", ПараметрыСеанса.ТекущийПользователь, ТипИспользуемогоПриложения);
	ТокенПользователя = РегистрыСведений.ТокеныПользователей.Получить(ОтборПользователя).Токен;

	Возврат ТокенПользователя; 

КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеЛичногоПриложения(Источник)
	
	ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Личное");
	НазваниеПриложенияХХ = Источник.Объект.НазваниеПриложенияХХ;
	ПочтаРазработчикаХХ = Источник.Объект.ПочтаРазработчикаХХ;
	ИдентификаторПриложенияХХ = Источник.Объект.ИдентификаторПриложенияХХ;
	СекретПриложенияХХ = Источник.Объект.СекретПриложенияХХ;
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбщегоПриложения()

	ДанныеОбщегоПриложения = ПолучитьДанныеОбщегоПриложения();
	
	ТипИспользуемогоПриложения = ПредопределенноеЗначение("Перечисление.ТипыПриложенияХХ.Общее");
	НазваниеПриложенияХХ = ДанныеОбщегоПриложения.НазваниеПриложенияХХ;
	ПочтаРазработчикаХХ = ДанныеОбщегоПриложения.ПочтаРазработчикаХХ;
	ИдентификаторПриложенияХХ = ДанныеОбщегоПриложения.ИдентификаторПриложенияХХ;
	СекретПриложенияХХ = ДанныеОбщегоПриложения.СекретПриложенияХХ;
	АдресРедиректа = ДанныеОбщегоПриложения.АдресРедиректа;
	ТокенПользователя = ПолучитьАктуальныйТокен(ТипИспользуемогоПриложения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОбщегоПриложения()

	ДанныеОбщегоПриложения = Новый Структура;
	ДанныеОбщегоПриложения.Вставить("НазваниеПриложенияХХ", Константы.НазваниеПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("ПочтаРазработчикаХХ", Константы.ПочтаРазработчикаХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("ИдентификаторПриложенияХХ", Константы.ИдентификаторПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("СекретПриложенияХХ", Константы.СекретПриложенияХХ.Получить());
	ДанныеОбщегоПриложения.Вставить("АдресРедиректа", Константы.АдресРедиректа.Получить());
	ДанныеОбщегоПриложения.Вставить("ТокенПользователя", ПолучитьАктуальныйТокен(Перечисления.ТипыПриложенияХХ.Общее));
	
	Возврат ДанныеОбщегоПриложения; 

КонецФункции

&НаКлиенте
Асинх Функция ПолучениеКодаАвторизации()
	
	HTTPСоединение = Новый HTTPСоединение("taukpebkr3.temp.swtest.ru");
	
	СтрокаЗапроса = СтрШаблон("/includes/get_authorization_code_xx.php?username=%1", ИмяТекущегоПользователя);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса);
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ПолучитьАсинх(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Ответ = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Если Ответ.Количество() <> 0 Тогда
			КодАвторизацииПользователя = Ответ[0].authorization_code;
		Иначе
			ОбщегоНазначенияКлиент.ВывестиСообщение("Запросите код авторизации для получения токена");
		КонецЕсли;		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьТокенПользователяВРегистр(ДанныеТокена, ТипИспользуемогоПриложения)
	
	Токен = ДанныеТокена.access_token;
	ВремяЖизниТокена = ДанныеТокена.expires_in;
	ТокенДляПродления = ДанныеТокена.refresh_token;
		
	НоваяЗапись = РегистрыСведений.ТокеныПользователей.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ТипПриложения = ТипИспользуемогоПриложения; 
	НоваяЗапись.Токен = Токен;
	НоваяЗапись.ВремяЖизниТокена = ВремяЖизниТокена;
	НоваяЗапись.ТокенДляПродления = ТокенДляПродления;
	НоваяЗапись.ДатаИВремяОкончанияТокена = ТекущаяДата() + ВремяЖизниТокена;
	НоваяЗапись.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенОбновленияИзРегистра(ТипИспользуемогоПриложения)

	ИнформацияОТокене = РегистрыСведений.ТокеныПользователей.СоздатьМенеджерЗаписи();
	ИнформацияОТокене.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ИнформацияОТокене.ТипПриложения = ТипИспользуемогоПриложения; 
	ИнформацияОТокене.Прочитать();  
	
	ДанныеСтарогоТокена = Новый Структура;
	
	Если ИнформацияОТокене.ДатаИВремяОкончанияТокена >= ТекущаяДата() Тогда
		ДанныеСтарогоТокена.Вставить("ДатаИВремяОкончанияТокена", ИнформацияОТокене.ДатаИВремяОкончанияТокена); 
		Возврат ДанныеСтарогоТокена;
	КонецЕсли;
			
	Если НЕ ИнформацияОТокене.Выбран() Тогда
		ДанныеСтарогоТокена.Вставить("ТокенОбновления", "");
		Возврат ДанныеСтарогоТокена;
	КонецЕсли; 
	
	ДанныеСтарогоТокена.Вставить("СтарыйТокен", ИнформацияОТокене.Токен);
	ДанныеСтарогоТокена.Вставить("ТокенОбновления", ИнформацияОТокене.ТокенДляПродления);
	
	Возврат ДанныеСтарогоТокена; 
	
КонецФункции

&НаКлиенте
Функция СформироватьПараметрыРезюме()
	
	СтрокаЗапроса = "?text=" + НаименованиеРезюме;
	
	Если СтрДлина(СокрЛП(НаименованиеРезюме)) <> 0 И НЕ КакПроизводитсяПоиск.Пустая() И СписокМестВстречиСлов.Количество() <> 0 Тогда
			
		Если КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ВсеСловаВстречаются") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=all";
		ИначеЕсли КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ЛюбоеИзСловВстречается") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=any";
		ИначеЕсли КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ТочнаяФразаВстречается") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=phrase";
		ИначеЕсли КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.НеВстречаются") Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.logic=except";
		КонецЕсли;
		
		УстановленПараметрВезде = СписокМестВстречиСлов.НайтиСтроки(Новый Структура("МестоВстречиСлов", ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.Везде")));	
		Если УстановленПараметрВезде.Количество() <> 0 Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=everywhere";
		ИначеЕсли СписокМестВстречиСлов.Количество() > 0 Тогда
			СтрокаЗапроса = СтрокаЗапроса + "&text.field=";		
			Для Шаг = 0 По СписокМестВстречиСлов.Количество() - 1 Цикл
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВНазванииРезюме"), "title,", "");
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОбразовании"), "education,", "");
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВКлючевыхНавыках"), "skills,", "");
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОпытеРаботы"), "experience,", "");
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВКомпанияхИОтраслях"), "experience_company,", "");
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВДолжностях"), "experience_position,", "");
				СтрокаЗапроса = СтрокаЗапроса + ?(СписокМестВстречиСлов.Получить(Шаг).МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.ВОбязанностях"), "experience_description,", "");
			КонецЦикла;				
			СтрокаЗапроса = Сред(СтрокаЗапроса, 1, СтрДлина(СтрокаЗапроса) - 1);			
		КонецЕсли;
		
		Если НЕ ПериодОпытаРаботы.Пустая() Тогда 	
			СтрокаЗапроса = СтрокаЗапроса + ?(ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаВсеВремяОпыта"), "&text.period=all_time", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаПоследнийГод"), "&text.period=last_year", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаПоследниеТриГода"), "&text.period=last_three_years", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(ПериодОпытаРаботы = ПредопределенноеЗначение("Перечисление.ПериодыОпытаРаботы.ЗаПоследниеШестьЛет"), "&text.period=last_six_years", "");
		КонецЕсли;
		Если НЕ РазмерКомпании.Пустая() Тогда
			СтрокаЗапроса = СтрокаЗапроса + ?(РазмерКомпании = ПредопределенноеЗначение("Перечисление.ВариантыРазмераКомпании.ЛюбойРазмер"), "&text.company_size=any", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(РазмерКомпании = ПредопределенноеЗначение("Перечисление.ВариантыРазмераКомпании.ДоСтаЧеловек"), "&text.company_size=small", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(РазмерКомпании = ПредопределенноеЗначение("Перечисление.ВариантыРазмераКомпании.ОтСтаДоТысячиЧеловек"), "&text.company_size=medium", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(РазмерКомпании = ПредопределенноеЗначение("Перечисление.ВариантыРазмераКомпании.БолееТысячиЧеловек"), "&text.company_size=large", "");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗапроса = СтрокаЗапроса + "&page=" + Строка(НомерСтраницы);
	СтрокаЗапроса = СтрокаЗапроса  + "&per_page=" + Строка(КоличествоЗаписейНаСтранице);
	
	Если ВозрастНижняяГраница <> 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&age_from=" + Строка(ВозрастНижняяГраница);		
	КонецЕсли;
	
	Если ВозрастВерхняяГраница <> 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&age_to=" + Строка(ВозрастВерхняяГраница);		
	КонецЕсли;  
	
	Если ВсеРезюмеСУказаннымВозрастом Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&label=only_with_age";
	КонецЕсли; 
	
	Если ПериодПоискаРезюме.ДатаНачала <> Дата('00010101') Тогда 		
		СтрокаЗапроса = СтрокаЗапроса + "&date_from=" + Формат(ПериодПоискаРезюме.ДатаНачала, "ДФ=yyyy-MM-dd");	
	КонецЕсли; 
	
	Если ПериодПоискаРезюме.ДатаОкончания <> Дата('00010101') Тогда 		
		СтрокаЗапроса = СтрокаЗапроса + "&date_to=" + Формат(ПериодПоискаРезюме.ДатаОкончания, "ДФ=yyyy-MM-dd");	
	КонецЕсли;
	
	Если ИспользоватьТипЗанятости Тогда
		Для Каждого СтрокаТЗ Из СписокТиповЗанятости Цикл
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ПолнаяЗанятость"), "&employment=full", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ЧастичнаяЗанятость"), "&employment=part", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ПроектнаяРабота"), "&employment=project", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.Волонтерство"), "&employment=volunteer", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.Стажировка"), "&employment=probation", "");	
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьОпытРаботы Тогда
		Для Каждого СтрокаТЗ Из СписокВариантовОпытаРаботы Цикл
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.НетОпыта"), "&experience=noExperience", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.ОтОдногоГодаДоТрехЛет"), "&experience=between1And3", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.ОтТрехДоШестиЛет"), "&experience=between3And6", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.БолееШестиЛет"), "&experience=moreThan6", "");	
		КонецЦикла;
	КонецЕсли;
		
	Если НЕ ПолСоискателя.Пустая() Тогда
		СтрокаЗапроса = СтрокаЗапроса + ?(ПолСоискателя = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"), "&gender=male", "");
		СтрокаЗапроса = СтрокаЗапроса + ?(ПолСоискателя = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"), "&gender=female", "");
	КонецЕсли;
	
	Если ПолОбязателен Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&label=only_with_gender";
	КонецЕсли;
	
	Если СписокГородов.Количество() <> 0 И ИспользоватьМестоПроживания Тогда
		Если НЕ ВариантПроживания.Пустая() Тогда
			СтрокаЗапроса = СтрокаЗапроса + ?(ВариантПроживания = ПредопределенноеЗначение("Перечисление.ВариантыМестаПроживания.ЖивутВУказанномРегионе"), "&relocation=living", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(ВариантПроживания = ПредопределенноеЗначение("Перечисление.ВариантыМестаПроживания.ЖивутВУказанномРегионеИлиГотовыПереехать"), "&relocation=living_or_relocation", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(ВариантПроживания = ПредопределенноеЗначение("Перечисление.ВариантыМестаПроживания.ЖивутВУказанномРегионеИГотовыКПереезду"), "&relocation=living_but_relocation", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(ВариантПроживания = ПредопределенноеЗначение("Перечисление.ВариантыМестаПроживания.НеЖивутВУказанномРегионеГотовыПереехать"), "&relocation=relocation", "");
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьМестоПроживания Тогда
		Для Каждого Город Из СписокГородов Цикл
			СтрокаЗапроса = СтрокаЗапроса + "&area=" + Город.ИдентификаторГородаХХ;	
		КонецЦикла;	
	КонецЕсли;
	
	Если ЖелаемаяЗарплатаОт <> 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&salary_from=" + СтрЗаменить(Строка(ЖелаемаяЗарплатаОт), Символы.НПП, "");	
	КонецЕсли;
	
	Если ЖелаемаяЗарплатаДо <> 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&salary_to=" + СтрЗаменить(Строка(ЖелаемаяЗарплатаДо), Символы.НПП, "");	
	КонецЕсли;
	
	Если ЖелаемаяЗарплатаУказана Тогда
		СтрокаЗапроса = СтрокаЗапроса + "&label=only_with_salary";	
	КонецЕсли;
		
	Если НЕ СортироватьРезюмеПо.Пустая() Тогда
		СтрокаЗапроса = СтрокаЗапроса + ?(СортироватьРезюмеПо = ПредопределенноеЗначение("Перечисление.ВариантыСортировкиРезюме.ПоСоответствию"), "&order_by=relevance", "");
		СтрокаЗапроса = СтрокаЗапроса + ?(СортироватьРезюмеПо = ПредопределенноеЗначение("Перечисление.ВариантыСортировкиРезюме.ПоДатеИзменения"), "&order_by=publication_time", "");
		СтрокаЗапроса = СтрокаЗапроса + ?(СортироватьРезюмеПо = ПредопределенноеЗначение("Перечисление.ВариантыСортировкиРезюме.ПоУбываниюЗарплат"), "&order_by=salary_desc", "");
		СтрокаЗапроса = СтрокаЗапроса + ?(СортироватьРезюмеПо = ПредопределенноеЗначение("Перечисление.ВариантыСортировкиРезюме.ПоВозрастаниюЗарплаты"), "&order_by=salary_asc", "");
	КонецЕсли;
	
	Если ИспользоватьСтатусПоискаРаботы Тогда
		Для Каждого СтрокаТЗ Из СписокСтатусовПоискаРаботы Цикл
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПоискаРаботы.АктивноИщетРаботу"), "&job_search_status=active_search", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПоискаРаботы.РассматриваетПредложения"), "&job_search_status=looking_for_offers", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПоискаРаботы.ПредложилиРаботуРешает"), "&job_search_status=has_job_offer", "");	
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьГрафикРаботы Тогда
		Для Каждого СтрокаТЗ Из СписокГрафиковРаботы Цикл
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ГрафикРаботы = ПредопределенноеЗначение("Перечисление.ГрафикиРаботы.ПолныйДень"), "&schedule=fullDay", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ГрафикРаботы = ПредопределенноеЗначение("Перечисление.ГрафикиРаботы.СменныйГрафик"), "&schedule=shift", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ГрафикРаботы = ПредопределенноеЗначение("Перечисление.ГрафикиРаботы.ГибкийГрафик"), "&schedule=flexible", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ГрафикРаботы = ПредопределенноеЗначение("Перечисление.ГрафикиРаботы.УдаленнаяРабота"), "&schedule=remote", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.ГрафикРаботы = ПредопределенноеЗначение("Перечисление.ГрафикиРаботы.ВахтовыйМетод"), "&schedule=flyInFlyOut", "");
		КонецЦикла;		
	КонецЕсли;
	
	Если ИспользоватьДопФильтр Тогда
		Для Каждого СтрокаТЗ Из СписокВариантовДополнительногоФильтра Цикл
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Фильтр = ПредопределенноеЗначение("Перечисление.ВариантыДополнительногоФильтра.ТолькоСФото"), "&label=only_with_photo", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Фильтр = ПредопределенноеЗначение("Перечисление.ВариантыДополнительногоФильтра.ЕстьАвто"), "&label=only_with_vehicle", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Фильтр = ПредопределенноеЗначение("Перечисление.ВариантыДополнительногоФильтра.СкрытьПросмотренныеМной"), "&label=exclude_viewed_by_user_id", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Фильтр = ПредопределенноеЗначение("Перечисление.ВариантыДополнительногоФильтра.СкрытьПросмотренныеКомпанией"), "&label=exclude_viewed_by_employer_id", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Фильтр = ПредопределенноеЗначение("Перечисление.ВариантыДополнительногоФильтра.ТолькоИзОткликовИПриглашений"), "&label=only_in_responses", "");
		КонецЦикла;			
	КонецЕсли;
	
	Если ИспользоватьСтанциюМетро Тогда
		Для Каждого СтрокаТЗ Из СписокСтанцийМетро Цикл
			СтрокаЗапроса = СтрокаЗапроса + "&metro=" + СтрокаТЗ.ИдентификаторСтанцииХХ;	
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьОбразование Тогда
		Для Каждого СтрокаТЗ Из СписокУровнейОбразования Цикл
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.Среднее"), "&education_levels=secondary", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.СреднееСпециальное"), "&education_levels=special_secondary", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.НеоконченноеВысшее"), "&education_levels=unfinished_higher", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.Высшее"), "&education_levels=higher", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.Бакалавр"), "&education_levels=bachelor", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.Магистр"), "&education_levels=master", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.КандидатНаук"), "&education_levels=candidate", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.Образование = ПредопределенноеЗначение("Перечисление.УровниОбразования.ДокторНаук"), "&education_levels=doctor", "");
		КонецЦикла;		
	КонецЕсли;
	
	Если ИспользоватьЯзык Тогда
		Для Каждого СтрокаТЗ Из СписокЯзыков Цикл
			СтрокаЗапроса = СтрокаЗапроса + "&language=" + СтрокаТЗ.ИдентификаторЯзыка;
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Начальный"), ".a1", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Элементарный"), ".a2", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Средний"), ".b1", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.СреднеПродвинутый"), ".b2", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Продвинутый"), ".c1", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.ВСовершенстве"), ".c2", "");
			СтрокаЗапроса = СтрокаЗапроса + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Родной"), ".l1", "");
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьКлючевыеНавыки Тогда	
		Для Каждого СтрокаТЗ Из СписокКлючевыхНавыков Цикл
			СтрокаЗапроса = СтрокаЗапроса + "&skill=" + СтрокаТЗ.ИдентификаторНавыка;
		КонецЦикла;		
	КонецЕсли;
	
	СтрокаЗапроса = СтрокаЗапроса + "&with_job_search_status=true";
		
	Возврат СтрокаЗапроса; 
	
КонецФункции 

&НаСервереБезКонтекста
Функция НайтиДубльКандидатаПоРезюме(АдресРезюме)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Код КАК Код
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.СсылкаНаРезюме ПОДОБНО &СсылкаНаРезюме";
	
	Запрос.УстановитьПараметр("СсылкаНаРезюме", АдресРезюме);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатПоиска = Новый Структура;
	Если РезультатЗапроса.Пустой() Тогда
		РезультатПоиска.Вставить("НайденДубль", Ложь);
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	РезультатПоиска.Вставить("НайденДубль", Истина);
	РезультатПоиска.Вставить("КодКандидата", Выборка.Код);
	
	Возврат РезультатПоиска;

КонецФункции

&НаКлиенте
Процедура СозданиеЭлементаСправочникаКандидата(ОтветJSON)
	
	ТекущаСтрокаТЧ = Элементы.СписокНайденныхРезюме.ТекущиеДанные;
		
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("ИсточникЗаполнения", "ПоискИПросмотрРезюмеХХ");
	ЗначенияРеквизитов.Вставить("ИсточникПривлечения", ПредопределенноеЗначение("Справочник.ИсточникиПривлечения.ХэдХантер"));
	ЗначенияРеквизитов.Вставить("СсылкаНаСкачиваниеРезюмеХХ", ТекущаСтрокаТЧ.СсылкаНаСкачиваниеРезюме);
	ЗначенияРеквизитов.Вставить("СсылкаНаРезюме", ТекущаСтрокаТЧ.АдресРезюме);	
	ЗначенияРеквизитов.Вставить("ГородПроживания", ОтветJSON["area"]);	
	ЗначенияРеквизитов.Вставить("ДатаСозданияРезюме", ТекущаСтрокаТЧ.ДатаСозданияРезюме);
	ЗначенияРеквизитов.Вставить("ДатаПоследнегоОбновленияРезюме", ТекущаСтрокаТЧ.ПоследнееОбновление);
	ЗначенияРеквизитов.Вставить("ЖелаемаяДолжность", ОтветJSON["title"]);
	ЗначенияРеквизитов.Вставить("Возраст", ОтветJSON["age"]); 
	
	УровеньОбразования = ОтветJSON["education"]["level"];
	
	Если УровеньОбразования <> Неопределено Тогда  
		ЗначенияРеквизитов.Вставить("УровеньОбразованияКандидата", УровеньОбразования); 
	КонецЕсли;
		
	ПолКандидата = ОтветJSON["gender"]; 
	
	Если ПолКандидата <> Неопределено Тогда
		МужскойПол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
		ЖенскийПол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
		ПолКандидата = ?(ОтветJSON["gender"]["id"] = "male", МужскойПол, ЖенскийПол);
		ЗначенияРеквизитов.Вставить("Пол", ПолКандидата); 	
	КонецЕсли;
	
	ОжидаемаяЗарплата = ОтветJSON["salary"];
	
	Если ОжидаемаяЗарплата <> Неопределено Тогда 
		ЗначенияРеквизитов.Вставить("ОжидаемаяЗарплата", ОтветJSON["salary"]["amount"]);
	КонецЕсли;   
	
	ОбщийОпытКандидата = ОтветJSON["total_experience"];
	
	Если ОбщийОпытКандидата <> Неопределено Тогда	
		ОбщийОпытРаботыВМесяцах = ОтветJSON["total_experience"]["months"];		
		Если ОбщийОпытРаботыВМесяцах <> 0 Тогда
			КоличествоОтработанныхЛет = Цел(ОбщийОпытРаботыВМесяцах / 12);
			КоличествоОтработанныхМесяцев = Строка(ОбщийОпытРаботыВМесяцах % 12);
		КонецЕсли;     
	КонецЕсли;
	ЗначенияРеквизитов.Вставить("ОбщийОпытВГодах", КоличествоОтработанныхЛет);
	ЗначенияРеквизитов.Вставить("ОбщийОпытВМесяцах", КоличествоОтработанныхМесяцев);
		
	ЗначенияРеквизитов.Вставить("ОпытРаботы", ОтветJSON["experience"]);	

	ДеньРождения = ОтветJSON["birth_date"];	
	Если ДеньРождения <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("ДатаРождения", ОбщегоНазначенияКлиент.ПолучитьФорматДатыХХ(ДеньРождения));	
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ЗнанияЯзыков", ОтветJSON["language"]);
		
	МетроКандидата = ОтветJSON["metro"];	
	Если МетроКандидата <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("СтанцияМетро", МетроКандидата["name"]);		
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ПодходящиеГрафикиРаботы", ОтветJSON["schedules"]);
	ЗначенияРеквизитов.Вставить("ПодходящиеТипыЗанятости", ОтветJSON["employments"]);

	ЗначенияРеквизитов.Вставить("ДополнительнаяИнформацияОСебе", ОтветJSON["skills"]);
	СписокКлючевыхНавыков = ОтветJSON["skill_set"];
	ЗначенияРеквизитов.Вставить("КлючевыеНавыки", СписокКлючевыхНавыков);
	ЗначенияРеквизитов.Вставить("ОбразованиеСоискателя", ОтветJSON["education"]);
			
	ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения", ЗначенияРеквизитов);	
	ОткрытьФорму("Справочник.Кандидаты.ФормаОбъекта", ПараметрыЗаполнения);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеВакансии(Вакансия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансия.НаименованиеВакансии КАК НаименованиеВакансии
		|ИЗ
		|	Документ.Вакансия КАК Вакансия
		|ГДЕ
		|	Вакансия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Вакансия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();

	Возврат Выборка.НаименованиеВакансии;	

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеГорода(ВыбранноеЗначение)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Города.Наименование КАК Наименование,
		|	Города.ИдентификаторГородаХХ КАК ИдентификаторГородаХХ,
		|	Города.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.Города КАК Города
		|ГДЕ
		|	Города.Ссылка В(&МассивГородов)";
	
	Запрос.УстановитьПараметр("МассивГородов", ВыбранноеЗначение);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивГородов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ДанныеГорода = Новый Структура("Наименование, ИдентификаторГорода, ЭтоГруппа", Выборка.Наименование, Выборка.ИдентификаторГородаХХ, Выборка.ЭтоГруппа);
		МассивГородов.Добавить(ДанныеГорода);
	КонецЦикла;
	
	Возврат МассивГородов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаписьВПараметр(Список, ИмяКолонки, ВыбранноеЗначение, НаименованиеПараметра)
	
	НайденныеДубли = Список.НайтиСтроки(Новый Структура(ИмяКолонки, ВыбранноеЗначение));
	Если НайденныеДубли.Количество() <> 0 Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение(НаименованиеПараметра + " - """ + Строка(ВыбранноеЗначение) + """ уже был выбран");
		Возврат;
	КонецЕсли;
	НоваяСтрока = Список.Добавить();
	НоваяСтрока[ИмяКолонки] = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовокГруппы(Список, ЭлементГруппа, НазваниеКолонки, НаименованиеЗаголовка, ИспользоватьПараметр)

	КоличествоЗаписей = Список.Количество();
	ИспользоватьПараметр = Истина;
	Если КоличествоЗаписей > 1 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка + ": " + Список.Получить(0)[НазваниеКолонки] + " и еще " + (КоличествоЗаписей - 1);
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка + ": " + Список.Получить(0)[НазваниеКолонки];
	ИначеЕсли КоличествоЗаписей = 0 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка;
		ИспользоватьПараметр = Ложь;
	КонецЕсли;		

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтанции(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтанцииМетро.Наименование КАК Наименование,
		|	СтанцииМетро.ИдентификаторСтанцииХХ КАК ИдентификаторСтанцииХХ,
		|	СтанцииМетро.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.СтанцииМетро КАК СтанцииМетро
		|ГДЕ
		|	СтанцииМетро.Ссылка В(&МассивСтанций)";
	
	Запрос.УстановитьПараметр("МассивСтанций", ВыбранноеЗначение);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивСтанций = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ДанныеСтанции = Новый Структура("Наименование, ИдентификаторСтанции, ЭтоГруппа", Выборка.Наименование, Выборка.ИдентификаторСтанцииХХ, Выборка.ЭтоГруппа);
		МассивСтанций.Добавить(ДанныеСтанции);
	КонецЦикла;
	
	Возврат МассивСтанций;	

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЯзыка(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Языки.Наименование КАК Наименование,
		|	Языки.ИдентификаторЯзыкаХХ КАК ИдентификаторЯзыкаХХ
		|ИЗ
		|	Справочник.Языки КАК Языки
		|ГДЕ
		|	Языки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВыбранноеЗначение);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеЯзыка = Новый Структура("НаименованиеЯзыка, ИдентификаторЯзыка", Выборка.Наименование, Выборка.ИдентификаторЯзыкаХХ);

	Возврат	ДанныеЯзыка;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчанию()

	КакПроизводитсяПоиск = ПредопределенноеЗначение("Перечисление.ВариантыПоискаКлючевыхСлов.ВсеСловаВстречаются");
	СортироватьРезюмеПо = ПредопределенноеЗначение("Перечисление.ВариантыСортировкиРезюме.ПоСоответствию");
	
	НоваяСтрока = СписокМестВстречиСлов.Добавить();
	НоваяСтрока.МестоВстречиСлов = ПредопределенноеЗначение("Перечисление.МестаВстречиСлов.Везде");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНавыков(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеНавыки.Наименование КАК Наименование,
		|	КлючевыеНавыки.ИдентификаторНавыкаХХ КАК ИдентификаторНавыкаХХ
		|ИЗ
		|	Справочник.КлючевыеНавыки КАК КлючевыеНавыки
		|ГДЕ
		|	КлючевыеНавыки.Ссылка В (&МассивНавыков)";
	
	Запрос.УстановитьПараметр("МассивНавыков", ВыбранноеЗначение);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивНавыков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеНавыка = Новый Структура("НаименованиеНавыка, ИдентификаторНавыка", Выборка.Наименование, Выборка.ИдентификаторНавыкаХХ);
		МассивНавыков.Добавить(ДанныеНавыка);
	КонецЦикла;
	
	Возврат МассивНавыков;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиОтбора(Поле)

	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;	

	Возврат НастройкиКомпоновки;
	
КонецФункции

#КонецОбласти
