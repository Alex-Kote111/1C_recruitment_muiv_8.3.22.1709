
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийСотрудник = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
	НазваниеПриложенияХХ = Константы.НазваниеПриложенияХХ.Получить();
	ПочтаРазработчикаХХ = Константы.ПочтаРазработчикаХХ.Получить();
			
	ТокенПользователя = ПолучитьАктуальныйТокен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЭтотОбъект.ВладелецФормы <> Неопределено И ЭтотОбъект.ВладелецФормы.ИмяФормы = "Документ.Вакансия.Форма.ФормаДокумента" Тогда
		ЗаполнитьДанныеОВакансии(ЭтотОбъект.ВладелецФормы.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Города.Форма.ФормаВыбора" Тогда	
		МассивГородов = ПолучитьДанныеГорода(ВыбранноеЗначение);	
		Для Каждого Город Из МассивГородов Цикл		
			Если СписокГородовПубликации.Количество() = 50 Тогда
				ОбщегоНазначенияКлиент.ВывестиСообщение("Можно выбрать не более 50 городов");
				Возврат;
			КонецЕсли;
					
			НайденныеДубли = СписокГородовПубликации.НайтиСтроки(Новый Структура("ИдентификаторГорода", Город.ИдентификаторГорода));		
			Если НайденныеДубли.Количество() <> 0 Тогда
				ОбщегоНазначенияКлиент.ВывестиСообщение("Город - """ + Строка(Город.Наименование) + """ уже был выбран");
				Продолжить;
			КонецЕсли;		
			НоваяСтрока = СписокГородовПубликации.Добавить();
			НоваяСтрока.Город = Город.Наименование;
			НоваяСтрока.ИдентификаторГорода = Город.ИдентификаторГорода;			
		КонецЦикла;
		ИзменитьЗаголовокГруппы(СписокГородовПубликации, Элементы.ГруппаПодборГородПубликации, "Город", "Город публикации");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.КлючевыеНавыки.ФормаВыбора" Тогда
		МассивНавыков = ПолучитьДанныеНавыков(ВыбранноеЗначение);
		Для Каждого Навык Из МассивНавыков Цикл
			Если СписокКлючевыхНавыков.Количество() = 15 Тогда
				ОбщегоНазначенияКлиент.ВывестиСообщение("Можно выбрать не более 15 навыков");
				Возврат;
			КонецЕсли;
			
			НайденныеДубли = СписокКлючевыхНавыков.НайтиСтроки(Новый Структура("Навык", Навык));
			Если НайденныеДубли.Количество() <> 0 Тогда
				ОбщегоНазначенияКлиент.ВывестиСообщение("Навык - """ + Строка(Навык) + """ уже был выбран");
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СписокКлючевыхНавыков.Добавить();
			НоваяСтрока.Навык = Навык;
		КонецЦикла;
		ИзменитьЗаголовокГруппы(СписокКлючевыхНавыков, Элементы.ГруппаКлючевыеНавыкиПодбор, "Навык", "Навыки");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Языки.ФормаВыбора" Тогда
		ДанныеЯзыка = ПолучитьДанныеЯзыка(ВыбранноеЗначение);
		НайденныеДубли = СписокЯзыков.НайтиСтроки(Новый Структура("ИдентификаторЯзыка", ДанныеЯзыка.ИдентификаторЯзыка));
		Если НайденныеДубли.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Язык - """ + Строка(ДанныеЯзыка.НаименованиеЯзыка) + """ уже был выбран");
			Возврат;
		КонецЕсли;
		НоваяСтрока = СписокЯзыков.Добавить();
		НоваяСтрока.Язык = ДанныеЯзыка.НаименованиеЯзыка;
		НоваяСтрока.ИдентификаторЯзыка = ДанныеЯзыка.ИдентификаторЯзыка;	
		ИзменитьЗаголовокГруппы(СписокЯзыков, Элементы.ГруппаЗнанияЯзыковПодбор, "Язык", "Знание языков");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.РабочиеДни.ФормаВыбора" Тогда
		НайденныеДубли = СписокГрафиковРаботы.НайтиСтроки(Новый Структура("График", ВыбранноеЗначение));
		Если НайденныеДубли.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("График - """ + Строка(ВыбранноеЗначение) + """ уже был выбран");
			Возврат;
		КонецЕсли;
		НоваяСтрока = СписокГрафиковРаботы.Добавить();
		НоваяСтрока.График = ВыбранноеЗначение;
		ИзменитьЗаголовокГруппы(СписокГрафиковРаботы, Элементы.ГруппаПодборГрафикаРаботы, "График", "График работы");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.РабочиеЧасы.ФормаВыбора" Тогда
		НайденныеДубли = СписокРабочихЧасовВДень.НайтиСтроки(Новый Структура("РабочиеЧасы", ВыбранноеЗначение));
		Если НайденныеДубли.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Значение - """ + Строка(ВыбранноеЗначение) + """ уже было выбрано");
			Возврат;
		КонецЕсли;
		НоваяСтрока = СписокРабочихЧасовВДень.Добавить();
		НоваяСтрока.РабочиеЧасы = ВыбранноеЗначение;
		ИзменитьЗаголовокГруппы(СписокРабочихЧасовВДень, Элементы.ГруппаПодборРабочихЧасов, "РабочиеЧасы", "Рабочие часы в день");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранаСпециализация" И Источник = "ПодборСпециализацииИзХХ" Тогда
		Специализация = Параметр.Специализация;
		ИдентификаторСпециализации = Параметр.Идентификатор;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОписаниеВакансии = ПолучитьОписаниеВакансии(Настройки["Вакансия"]);
	ИзменитьЗаголовокГруппыНаСервере(СписокГрафиковРаботы, Элементы.ГруппаПодборГрафикаРаботы, "График", "График работы");
	ИзменитьЗаголовокГруппыНаСервере(СписокРабочихЧасовВДень, Элементы.ГруппаПодборРабочихЧасов, "РабочиеЧасы", "Рабочие часы в день");
	ИзменитьЗаголовокГруппыНаСервере(СписокГородовПубликации, Элементы.ГруппаПодборГородПубликации, "Город", "Город публикации");
	ИзменитьЗаголовокГруппыНаСервере(СписокКлючевыхНавыков, Элементы.ГруппаКлючевыеНавыкиПодбор, "Навык", "Навыки");
	ИзменитьЗаголовокГруппыНаСервере(СписокЯзыков, Элементы.ГруппаЗнанияЯзыковПодбор, "Язык", "Знание языков");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокГородовПубликацииПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокГородовПубликации, Элементы.ГруппаПодборГородПубликации, "Город", "Город публикации");
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	КонтактыМенеджера = ПолучитьКонтактыМенеджера(Менеджер);	
	
	ПочтаМенеджера = КонтактыМенеджера.Эмаил;
	
	КонтактыМенеджера.РабочийТелефон = СтрЗаменить(КонтактыМенеджера.РабочийТелефон, " ", "");
	КонтактыМенеджера.РабочийТелефон = СтрЗаменить(КонтактыМенеджера.РабочийТелефон, "(", "");
	КонтактыМенеджера.РабочийТелефон = СтрЗаменить(КонтактыМенеджера.РабочийТелефон, ")", "");
	КонтактыМенеджера.РабочийТелефон = СтрЗаменить(КонтактыМенеджера.РабочийТелефон, "-", "");
	РабочийТелефонМенеджера = КонтактыМенеджера.РабочийТелефон;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКлючевыхНавыковПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокКлючевыхНавыков, Элементы.ГруппаКлючевыеНавыкиПодбор, "Навык", "Навыки");
КонецПроцедуры

&НаКлиенте
Процедура СписокЯзыковПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокЯзыков, Элементы.ГруппаЗнанияЯзыковПодбор, "Язык", "Знание языков");
КонецПроцедуры

&НаКлиенте
Процедура СпециализацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ОткрытьФорму("Обработка.ПодборСпециализацииИзХХ.Форма.Форма",, ЭтотОбъект);		
КонецПроцедуры

&НаКлиенте
Процедура СписокГрафиковРаботыПослеУдаления(Элемент)
	ИзменитьЗаголовокГруппы(СписокГрафиковРаботы, Элементы.ГруппаПодборГрафикаРаботы, "График", "График работы");
КонецПроцедуры

&НаКлиенте
Процедура СписокРабочихЧасовВДеньПослеУдаления(Элемент)	
	ИзменитьЗаголовокГруппы(СписокРабочихЧасовВДень, Элементы.ГруппаПодборРабочихЧасов, "РабочиеЧасы", "Рабочие часы в день");		
КонецПроцедуры

&НаКлиенте
Процедура ВакансияПриИзменении(Элемент)
	
	ОчиститьЗначенияРеквизитов();
	
	Если Вакансия.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеОВакансии(Вакансия);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЯзыков

&НаКлиенте
Процедура СписокЯзыковУровеньЗнанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Начальный"), "A1 — Начальный");
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Элементарный"), "A2 — Элементарный");
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Средний"), "B1 — Средний");
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.СреднеПродвинутый"), "B2 — Средне-продвинутый");
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Продвинутый"), "C1 — Продвинутый");
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.ВСовершенстве"), "C2 — В совершенстве");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура СоздатьЧерновикВакансии(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторЧерновика) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Уже был создан черновик на основе этой вакансии");
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаполнены = ПроверитьЗаполнениеОбязательныхРеквизитов();
	
	Если НЕ РеквизитыЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());

	HTTPЗапрос = Новый HTTPЗапрос("/vacancies/drafts");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	ТелоЗапроса = СформироватьТелоЗапроса();
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос); 	
		Если HTTPОтвет.КодСостояния <> 201 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось создать черновик вакансии. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		ОбщегоНазначенияКлиент.ВывестиСообщение("Черновик - """ + ОтветJSON.name + """ был успешно создан.");
		
		Если ОтветJSON.Свойство("ignored_fields") И ОтветJSON.ignored_fields.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось сохранить следующие поля в черновике:");
			Для Каждого Поле Из ОтветJSON.ignored_fields Цикл
				ОбщегоНазначенияКлиент.ВывестиСообщение(Поле);		
			КонецЦикла;
		КонецЕсли;
		
		Если ОтветJSON.Свойство("validation_errors") И ОтветJSON.validation_errors.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Для успешной публикации вакансии необходимо исправить следующие поля:");
			Для Каждого Поле Из ОтветJSON.validation_errors Цикл
				ОбщегоНазначенияКлиент.ВывестиСообщение("Поле - """ + Поле.value + """ причина - " + Поле.reason);		
			КонецЦикла;
		КонецЕсли;
		
		ИдентификаторЧерновика = ОтветJSON.id;
		ГотовностьЧерновикаКПубликации = ОтветJSON.publication_ready;
		
		ДанныеЧерновика = Новый Структура;
		ДанныеЧерновика.Вставить("Вакансия", Вакансия);
		ДанныеЧерновика.Вставить("ТипПубликации", ТипПубликации);
		ДанныеЧерновика.Вставить("ТипВакансии", ТипВакансии);
		ДанныеЧерновика.Вставить("ВидИзменения", ПредопределенноеЗначение("Перечисление.ВидыИзмененияВакансииХХ.Создание"));
		ДанныеЧерновика.Вставить("ГотовностьКПубликации", ГотовностьЧерновикаКПубликации);
		ДанныеЧерновика.Вставить("ИдентификаторЧерновика", ИдентификаторЧерновика);
		ДанныеЧерновика.Вставить("Ответственный", ТекущийСотрудник);
		ДанныеЧерновика.Вставить("ОтветственныйЗаВакансию", Менеджер);
		
		ЗаписатьДанныеЧерновикаВРегистр(ДанныеЧерновика);
		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());	
	КонецПопытки;		
			
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьГород(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);	
	ОткрытьФорму("Справочник.Города.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНавык(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);	
	ОткрытьФорму("Справочник.КлючевыеНавыки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЯзык(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, ФиксированныеНастройки", Ложь, ПолучитьНастройкиОтбора("ИдентификаторЯзыкаХХ"));	
	ОткрытьФорму("Справочник.Языки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьГрафикРаботы(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.РабочиеДни.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьРабочиеЧасы(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Перечисление.РабочиеЧасы.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбновитьДанныеЧерновика(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
	
	Если Вакансия.Пустая() Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Вакансия не выбрана", "Вакансия");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторЧерновика) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Для выбранной вакансии не был создан черновик. Обновление невозможно");
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаполнены = ПроверитьЗаполнениеОбязательныхРеквизитов();
	
	Если НЕ РеквизитыЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());

	HTTPЗапрос = Новый HTTPЗапрос("/vacancies/drafts/" + ИдентификаторЧерновика);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	ТелоЗапроса = СформироватьТелоЗапроса();
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ЗаписатьАсинх(HTTPЗапрос); 	
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось обновить черновик вакансии. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());	
		ОбщегоНазначенияКлиент.ВывестиСообщение("Черновик - """ + ОтветJSON.name + """ был успешно обновлен.");
		
		ГотовностьЧерновикаКПубликации = ОтветJSON.publication_ready;
		ИдентификаторЧерновика = ОтветJSON.id;
		
		ДанныеЧерновика = Новый Структура;
		ДанныеЧерновика.Вставить("Вакансия", Вакансия);
		ДанныеЧерновика.Вставить("ТипПубликации", ТипПубликации);
		ДанныеЧерновика.Вставить("ТипВакансии", ТипВакансии);
		ДанныеЧерновика.Вставить("ВидИзменения", ПредопределенноеЗначение("Перечисление.ВидыИзмененияВакансииХХ.ИзменениеДанных"));
		ДанныеЧерновика.Вставить("ГотовностьКПубликации", ГотовностьЧерновикаКПубликации);
		ДанныеЧерновика.Вставить("ИдентификаторЧерновика", ИдентификаторЧерновика);
		ДанныеЧерновика.Вставить("Ответственный", ТекущийСотрудник);
		ДанныеЧерновика.Вставить("ОтветственныйЗаВакансию", Менеджер);
		
		ЗаписатьДанныеЧерновикаВРегистр(ДанныеЧерновика);		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьЧерновикВакансии(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
	
	Если Вакансия.Пустая() Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите вакансию", "Вакансия");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторЧерновика) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Для выбранной вакансии не был создан черновик. Удаление невозможно");
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());

	HTTPЗапрос = Новый HTTPЗапрос("/vacancies/drafts/" + ИдентификаторЧерновика);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.УдалитьАсинх(HTTPЗапрос); 	
		Если HTTPОтвет.КодСостояния <> 204 Тогда
			ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось удалить черновик вакансии. Код ответа - " + HTTPОтвет.КодСостояния);
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ВывестиСообщение("Черновик - """ + НазваниеВакансии + """ был успешно удален.");
		
		ДанныеЧерновика = Новый Структура;
		ДанныеЧерновика.Вставить("Вакансия", Вакансия);
		ДанныеЧерновика.Вставить("ТипПубликации", ТипПубликации);
		ДанныеЧерновика.Вставить("ТипВакансии", ТипВакансии);
		ДанныеЧерновика.Вставить("ВидИзменения", ПредопределенноеЗначение("Перечисление.ВидыИзмененияВакансииХХ.Удаление"));
		ДанныеЧерновика.Вставить("ГотовностьКПубликации", Ложь);
		ДанныеЧерновика.Вставить("ИдентификаторЧерновика", ИдентификаторЧерновика);
		ДанныеЧерновика.Вставить("Ответственный", ТекущийСотрудник);
		ДанныеЧерновика.Вставить("ОтветственныйЗаВакансию", Менеджер);
		
		ЗаписатьДанныеЧерновикаВРегистр(ДанныеЧерновика);
		
		ИдентификаторЧерновика = "";
		ГотовностьЧерновикаКПубликации = Ложь;
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());	
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОпубликоватьВакансиюНаОсновеЧерновика(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ТокенПользователя) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Получите токен");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторЧерновика) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Для выбранной вакансии не был создан черновик. Публикация невозможна");
		Возврат;
	КонецЕсли;
	
	
	ГотовностьЧерновикаКПубликации = ПолучитьГотовностьКПубликацииИзРегистра(Вакансия);
	
	Если НЕ ГотовностьЧерновикаКПубликации Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Черновик не готов к публикации");
		Возврат;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение("api.hh.ru", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	HTTPЗапрос = Новый HTTPЗапрос("/vacancies/drafts/" + ИдентификаторЧерновика + "/publish");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + ТокенПользователя);
	HTTPЗапрос.Заголовки.Вставить("User-Agent", НазваниеПриложенияХХ + " (" + ПочтаРазработчикаХХ + ")");
	
	Попытка
		HTTPОтвет = Ждать HTTPСоединение.ОтправитьДляОбработкиАсинх(HTTPЗапрос); 	
		Если HTTPОтвет.КодСостояния <> 201 Тогда
			Если HTTPОтвет.КодСостояния = 403 Тогда
				ОтветJSON = ОбщегоНазначенияКлиент.ПрочитатьЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
				Для Каждого Ошибка Из ОтветJSON.errors Цикл
					Если Ошибка.value = "not_enough_purchased_services" Тогда
						ОбщегоНазначенияКлиент.ВывестиСообщение("Купленных услуг недостаточно для публикации или обновления данного типа вакансии");
					КонецЕсли;
				КонецЦикла;
				Возврат;
			Иначе
				ОбщегоНазначенияКлиент.ВывестиСообщение("Не удалось опубликовать вакансию на основе черновика. Код ответа - " + HTTPОтвет.КодСостояния);
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		ОбщегоНазначенияКлиент.ВывестиСообщение("Вакансия - """ + НазваниеВакансии + """ была успешно опубликована на основе черновика.");
				
		ДанныеЧерновика = Новый Структура;
		ДанныеЧерновика.Вставить("Вакансия", Вакансия);
		ДанныеЧерновика.Вставить("ТипПубликации", ТипПубликации);
		ДанныеЧерновика.Вставить("ТипВакансии", ТипВакансии);
		ДанныеЧерновика.Вставить("ВидИзменения", ПредопределенноеЗначение("Перечисление.ВидыИзмененияВакансииХХ.ПубликацияНаОсновеЧерновика"));
		ДанныеЧерновика.Вставить("ГотовностьКПубликации", ГотовностьЧерновикаКПубликации);
		ДанныеЧерновика.Вставить("ИдентификаторЧерновика", ИдентификаторЧерновика);
		ДанныеЧерновика.Вставить("Ответственный", ТекущийСотрудник);
		ДанныеЧерновика.Вставить("ОтветственныйЗаВакансию", Менеджер);
		
		ЗаписатьДанныеЧерновикаВРегистр(ДанныеЧерновика);		
	Исключение
		ОбщегоНазначенияКлиент.ВывестиСообщение(ОписаниеОшибки());	
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьАктуальныйТокен()

	ОтборПользователя = Новый Структура("Пользователь, ТипПриложения", ПараметрыСеанса.ТекущийПользователь, Перечисления.ТипыПриложенияХХ.Общее);
	ТокенПользователя = РегистрыСведений.ТокеныПользователей.Получить(ОтборПользователя).Токен;

	Возврат ТокенПользователя; 

КонецФункции

&НаКлиенте
Функция СформироватьТелоЗапроса()

	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("accept_handicapped", СоискательСИнвалидностью);
	ТелоЗапроса.Вставить("accept_incomplete_resumes", НеполноеРезюме);
	ТелоЗапроса.Вставить("accept_temporary", ВременноеТрудоустройство);
	// address Адрес работодателя
	ТелоЗапроса.Вставить("allow_messages", РазрешениеСообщений);
	
	ИдентификаторыГородов = Новый Массив;	
	Для Каждого СтрокаТЗ Из СписокГородовПубликации Цикл
		ИдентификаторыГородов.Добавить(Новый Структура("id", СтрокаТЗ.ИдентификаторГорода));		
	КонецЦикла;	
	ТелоЗапроса.Вставить("areas", ИдентификаторыГородов);
	
	// assigned_manager_id Идентификатор рабочего аккаунта менеджера, которому перейдет вакансия после публикации
	
	Если ТипПубликации = ПредопределенноеЗначение("Перечисление.БиллинговыйТипВакансииХХ.Бесплатная") Тогда
		ТелоЗапроса.Вставить("billing_type", Новый Структура("id", "free"));
	ИначеЕсли ТипПубликации = ПредопределенноеЗначение("Перечисление.БиллинговыйТипВакансииХХ.Стандарт") Тогда
		ТелоЗапроса.Вставить("billing_type", Новый Структура("id", "standard"));
	ИначеЕсли ТипПубликации = ПредопределенноеЗначение("Перечисление.БиллинговыйТипВакансииХХ.СтандартПлюс") Тогда
		ТелоЗапроса.Вставить("billing_type", Новый Структура("id", "standard_plus"));
	ИначеЕсли ТипПубликации = ПредопределенноеЗначение("Перечисление.БиллинговыйТипВакансииХХ.Премиум") Тогда
		ТелоЗапроса.Вставить("billing_type", Новый Структура("id", "premium"));
	КонецЕсли;
	
	// branded_template Идентификатор брендированного шаблона вакансий работодателя из списка доступных
	
	ТелоЗапроса.Вставить("code", КодВакансии);

	КонтактыМенеджера = Новый Структура;
	КонтактыМенеджера.Вставить("email", ПочтаМенеджера);
	КонтактыМенеджера.Вставить("name", Строка(Менеджер));
	ТелефоныМенеджера = Новый Массив; 
	ТелефонМенеджера = Новый Структура("comment, formatted", КомментарийККонтактам, РабочийТелефонМенеджера); 
	ТелефоныМенеджера.Добавить(ТелефонМенеджера);
	КонтактыМенеджера.Вставить("phones", ТелефоныМенеджера);
	ТелоЗапроса.Вставить("contacts", КонтактыМенеджера);	
	
	// custom_employer_name Название компании для анонимных вакансий (type.id=anonymous), например "крупный российский банк". Поле становится обязательным при публикации вакансии анонимного типа
	// department Департамент, от имени которого размещается вакансия	
	ТекстHTML = "";
	СтруктураВложений = Новый Структура;
	ОписаниеВакансии.ПолучитьHTML(ТекстHTML, СтруктураВложений);	
	ТелоЗапроса.Вставить("description", ТекстHTML); 
	// driver_license_types Категория водительских прав
	Если ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.Полная") Тогда
		ТелоЗапроса.Вставить("employment_form", Новый Структура("id", "FULL"));
	ИначеЕсли ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.Частичная") Тогда
		ТелоЗапроса.Вставить("employment_form", Новый Структура("id", "PART"));
	ИначеЕсли ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.ПроектИлиРазовоеЗадание") Тогда
		ТелоЗапроса.Вставить("employment_form", Новый Структура("id", "PROJECT"));
	ИначеЕсли ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.Вахта") Тогда
		ТелоЗапроса.Вставить("employment_form", Новый Структура("id", "FLY_IN_FLY_OUT"));
	КонецЕсли;
	
	Если ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.НетОпыта") Тогда
		ТелоЗапроса.Вставить("experience", Новый Структура("id", "noExperience"));
	ИначеЕсли ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.ОтОдногоГодаДоТрехЛет") Тогда
		ТелоЗапроса.Вставить("experience", Новый Структура("id", "between1And3"));
	ИначеЕсли ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.ОтТрехДоШестиЛет") Тогда
		ТелоЗапроса.Вставить("experience", Новый Структура("id", "between3And6"));
	ИначеЕсли ОпытРаботы = ПредопределенноеЗначение("Перечисление.ОпытРаботы.БолееШестиЛет") Тогда
		ТелоЗапроса.Вставить("experience", Новый Структура("id", "moreThan6"));	
	КонецЕсли;
	
	// fly_in_fly_out_duration Список вариантов длительности вахты
	ТелоЗапроса.Вставить("internship", Стажировка);

	НаименованиеНавыков = Новый Массив;	
	Для Каждого СтрокаТЗ Из СписокКлючевыхНавыков Цикл
		НаименованиеНавыков.Добавить(Новый Структура("name", СтрокаТЗ.Навык));		
	КонецЦикла;	
	ТелоЗапроса.Вставить("key_skills", НаименованиеНавыков);
	
	ДанныеЯзыков = Новый Массив;	
	Для Каждого СтрокаТЗ Из СписокЯзыков Цикл
		УровеньЗнанияЯзыка = "";
		УровеньЗнанияЯзыка = УровеньЗнанияЯзыка + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Начальный"), "a1", "");
		УровеньЗнанияЯзыка = УровеньЗнанияЯзыка + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Элементарный"), "a2", "");
		УровеньЗнанияЯзыка = УровеньЗнанияЯзыка + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Средний"), "b1", "");
		УровеньЗнанияЯзыка = УровеньЗнанияЯзыка + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.СреднеПродвинутый"), "b2", "");
		УровеньЗнанияЯзыка = УровеньЗнанияЯзыка + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Продвинутый"), "c1", "");
		УровеньЗнанияЯзыка = УровеньЗнанияЯзыка + ?(СтрокаТЗ.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.ВСовершенстве"), "c2", "");	
		ДанныеЯзыков.Добавить(Новый Структура("id, level", СтрокаТЗ.ИдентификаторЯзыка, Новый Структура("id", УровеньЗнанияЯзыка)));		
	КонецЦикла;	
	ТелоЗапроса.Вставить("languages", ДанныеЯзыков);
	
	ТелоЗапроса.Вставить("name", НазваниеВакансии);
	ТелоЗапроса.Вставить("night_shifts", НочныеСмены);

	ДанныеСпециализации = Новый Массив;
	ДанныеСпециализации.Добавить(Новый Структура("id", ИдентификаторСпециализации));
	ТелоЗапроса.Вставить("professional_roles", ДанныеСпециализации);
	
	ТелоЗапроса.Вставить("response_letter_required", СопроводительноеПисьмо);
	ТелоЗапроса.Вставить("response_notifications", УведомлятьОНовыхОткликах);
	// response_url URL отклика для прямых вакансий
	
	Зарплата = Новый Структура;
	Зарплата.Вставить("currency", "RUR");
	Зарплата.Вставить("frequency", Новый Структура ("id", "MONTHLY"));
	Зарплата.Вставить("from", ЗарплатаОт);
	Зарплата.Вставить("gross", ДоВычетаНалога);
	Зарплата.Вставить("mode", Новый Структура ("id", "MONTH"));
	Зарплата.Вставить("to", ЗарплатаДо);
	ТелоЗапроса.Вставить("salary_range", Зарплата);
	
	ТелоЗапроса.Вставить("scheduled_at", ВремяЗапланированнойПубликации);
	// test Тест, который будет добавлен в вакансию
	
	Если ТипВакансии = ПредопределенноеЗначение("Перечисление.ТипыВакансийХХ.Открытая") Тогда
		ТелоЗапроса.Вставить("type", Новый Структура("id", "open"));
	ИначеЕсли ТипВакансии = ПредопределенноеЗначение("Перечисление.ТипыВакансийХХ.Закрытая") Тогда
		ТелоЗапроса.Вставить("type", Новый Структура("id", "closed"));
	ИначеЕсли ТипВакансии = ПредопределенноеЗначение("Перечисление.ТипыВакансийХХ.Анонимная") Тогда
		ТелоЗапроса.Вставить("type", Новый Структура("id", "anonymous"));
	ИначеЕсли ТипВакансии = ПредопределенноеЗначение("Перечисление.ТипыВакансийХХ.Рекламная") Тогда
		ТелоЗапроса.Вставить("type", Новый Структура("id", "direct"));
	КонецЕсли;
	
	// vacancy_properties
	
	ТелоЗапроса.Вставить("with_zp", РазместитьНаЗарплатаРу);
	
	ДанныеФорматаРаботы = Новый Массив;
	Если ФорматРаботы = ПредопределенноеЗначение("Перечисление.ФорматыРаботы.НаМестеРаботодателя") Тогда
		ДанныеФорматаРаботы.Добавить(Новый Структура("id", "ON_SITE"));
		ТелоЗапроса.Вставить("work_format", ДанныеФорматаРаботы);
	ИначеЕсли ФорматРаботы = ПредопределенноеЗначение("Перечисление.ФорматыРаботы.ИзДома") Тогда
		ДанныеФорматаРаботы.Добавить(Новый Структура("id", "REMOTE"));
		ТелоЗапроса.Вставить("work_format", ДанныеФорматаРаботы);
	ИначеЕсли ФорматРаботы = ПредопределенноеЗначение("Перечисление.ФорматыРаботы.Гибрид") Тогда
		ДанныеФорматаРаботы.Добавить(Новый Структура("id", "HYBRID"));
		ТелоЗапроса.Вставить("work_format", ДанныеФорматаРаботы);
	ИначеЕсли ФорматРаботы = ПредопределенноеЗначение("Перечисление.ФорматыРаботы.Разъездная") Тогда
		ДанныеФорматаРаботы.Добавить(Новый Структура("id", "FIELD_WORK"));
		ТелоЗапроса.Вставить("work_format", ДанныеФорматаРаботы);
	КонецЕсли;
	
	ГрафикиРаботы = Новый Массив;
	Для Каждого СтрокаТЗ Из СписокГрафиковРаботы Цикл	
		Если СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ШестьИОдин") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "SIX_ON_ONE_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ПятьИДва") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "FIVE_ON_TWO_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ЧетыреИЧетыре") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "FOUR_ON_FOUR_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ЧетыреИТри") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "FOUR_ON_THREE_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ЧетыреИДва") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "FOUR_ON_TWO_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ТриИТри") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "THREE_ON_THREE_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ТриИДва") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "THREE_ON_TWO_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ДваИДва") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "TWO_ON_TWO_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ДваИОдин") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "TWO_ON_ONE_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ОдинИТри") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "ONE_ON_THREE_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ОдинИДва") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "ONE_ON_TWO_OFF"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.ПоВыходным") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "WEEKEND"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.Свободный") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "FLEXIBLE"));
		ИначеЕсли СтрокаТЗ.График = ПредопределенноеЗначение("Перечисление.РабочиеДни.Свободный") Тогда
			ГрафикиРаботы.Добавить(Новый Структура("id", "OTHER"));
		КонецЕсли;	
		ТелоЗапроса.Вставить("work_schedule_by_days", ГрафикиРаботы);
	КонецЦикла;
	
	РабочиеЧасы = Новый Массив;
	Для Каждого СтрокаТЗ Из СписокРабочихЧасовВДень Цикл
		Если СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Два") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_2"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Три") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_3"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Четыре") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_4"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Пять") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_5"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Шесть") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_6"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Семь") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_7"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Восемь") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_8"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Девять") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_9"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Десять") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_10"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Одиннадцать") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_11"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Двенадцать") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_12"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.ДвадцатьЧетыре") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "HOURS_24"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.ПоДоговоренности") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "FLEXIBLE"));
		ИначеЕсли СтрокаТЗ.РабочиеЧасы = ПредопределенноеЗначение("Перечисление.РабочиеЧасы.Другое") Тогда
			РабочиеЧасы.Добавить(Новый Структура("id", "OTHER"));
		КонецЕсли;
		ТелоЗапроса.Вставить("working_hours", РабочиеЧасы);
	КонецЦикла;
		
	СтрокаJSON = ОбщегоНазначенияКлиент.ЗаписатьЗначениеВJSON(ТелоЗапроса);
	
	Возврат СтрокаJSON; 

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеГорода(ВыбранноеЗначение)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Города.Наименование КАК Наименование,
		|	Города.ИдентификаторГородаХХ КАК ИдентификаторГородаХХ
		|ИЗ
		|	Справочник.Города КАК Города
		|ГДЕ
		|	Города.Ссылка В(&МассивГородов)";
	
	Запрос.УстановитьПараметр("МассивГородов", ВыбранноеЗначение);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивГородов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ДанныеГорода = Новый Структура("Наименование, ИдентификаторГорода", Выборка.Наименование, Выборка.ИдентификаторГородаХХ);
		МассивГородов.Добавить(ДанныеГорода);
	КонецЦикла;
	
	Возврат МассивГородов;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьЗаголовокГруппы(Список, ЭлементГруппа, НазваниеКолонки, НаименованиеЗаголовка)

	КоличествоЗаписей = Список.Количество();
	Если КоличествоЗаписей > 1 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка + ": " + Список.Получить(0)[НазваниеКолонки] + " и еще " + (КоличествоЗаписей - 1);
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка + ": " + Список.Получить(0)[НазваниеКолонки];
	ИначеЕсли КоличествоЗаписей = 0 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка;
	КонецЕсли;		

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактыМенеджера(Менеджер)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.РабочийТелефон КАК РабочийТелефон,
		|	Сотрудники.Эмаил КАК Эмаил
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Менеджер);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();

	КонтактыМенеджера = Новый Структура("РабочийТелефон, Эмаил", Сред(Выборка.РабочийТелефон, 2), Выборка.Эмаил);

	Возврат КонтактыМенеджера;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНавыков(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеНавыки.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КлючевыеНавыки КАК КлючевыеНавыки
		|ГДЕ
		|	КлючевыеНавыки.Ссылка В(&МассивНавыков)";
	
	Запрос.УстановитьПараметр("МассивНавыков", ВыбранноеЗначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивНавыков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивНавыков.Добавить(Выборка.Наименование);
	КонецЦикла;
	
	Возврат МассивНавыков;

КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиОтбора(Поле)

	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;	

	Возврат НастройкиКомпоновки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЯзыка(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Языки.Наименование КАК Наименование,
		|	Языки.ИдентификаторЯзыкаХХ КАК ИдентификаторЯзыкаХХ
		|ИЗ
		|	Справочник.Языки КАК Языки
		|ГДЕ
		|	Языки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВыбранноеЗначение);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеЯзыка = Новый Структура("НаименованиеЯзыка, ИдентификаторЯзыка", Выборка.Наименование, Выборка.ИдентификаторЯзыкаХХ);

	Возврат	ДанныеЯзыка;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВакансии(Вакансия)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансия.Номер КАК Номер,
		|	Вакансия.НаименованиеВакансии КАК НаименованиеВакансии,
		|	Вакансия.ОпытРаботы КАК ОпытРаботы,
		|	Вакансия.ТипЗанятости КАК ТипЗанятости,
		|	Вакансия.ГрафикРаботы КАК ГрафикРаботы,
		|	Вакансия.ФорматРаботы КАК ФорматРаботы,
		|	Вакансия.ОплатаТрудаОт КАК ОплатаТрудаОт,
		|	Вакансия.ОплатаТрудаДо КАК ОплатаТрудаДо,
		|	Вакансия.ДоВычетаНалога КАК ДоВычетаНалога,
		|	Вакансия.ХранилищеФорматированногоТекста КАК ХранилищеФорматированногоТекста,
		|	Вакансия.СтатусВакансии КАК СтатусВакансии
		|ИЗ
		|	Документ.Вакансия КАК Вакансия
		|ГДЕ
		|	Вакансия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВакансияКлючевыеНавыки.Навык) КАК НавыкПредставление
		|ИЗ
		|	Документ.Вакансия.КлючевыеНавыки КАК ВакансияКлючевыеНавыки
		|ГДЕ
		|	ВакансияКлючевыеНавыки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВакансияЗнанияЯзыков.Язык) КАК ЯзыкПредставление,
		|	ВакансияЗнанияЯзыков.УровеньВладения КАК УровеньВладения,
		|	ВакансияЗнанияЯзыков.Язык.ИдентификаторЯзыкаХХ КАК ЯзыкИдентификаторЯзыкаХХ
		|ИЗ
		|	Документ.Вакансия.ЗнанияЯзыков КАК ВакансияЗнанияЯзыков
		|ГДЕ
		|	ВакансияЗнанияЯзыков.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЧерновикиВакансийХХ.ИдентификаторЧерновика КАК ИдентификаторЧерновика
		|ИЗ
		|	РегистрСведений.ЧерновикиВакансийХХ КАК ЧерновикиВакансийХХ
		|ГДЕ
		|	ЧерновикиВакансийХХ.Вакансия = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧерновикиВакансийХХСрезПоследних.ГотовностьКПубликации КАК ГотовностьКПубликации
		|ИЗ
		|	РегистрСведений.ЧерновикиВакансийХХ.СрезПоследних(, Вакансия = &Ссылка) КАК ЧерновикиВакансийХХСрезПоследних";
	
	Запрос.УстановитьПараметр("Ссылка", Вакансия); 
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапкиВакансии = РезультатЗапроса[0].Выбрать();
	Навыки = РезультатЗапроса[1].Выбрать();
	Языки = РезультатЗапроса[2].Выбрать();
	ИдентификаторЧерновика = РезультатЗапроса[3].Выбрать();
	ГотовностьКПубликации = РезультатЗапроса[4].Выбрать();
	
	ДанныеШапкиВакансии.Следующий();
	ИдентификаторЧерновика.Следующий();
	ГотовностьКПубликации.Следующий();
	
	ОсновнаяИнформацияВакансии = Новый Структура;
	ОсновнаяИнформацияВакансии.Вставить("Номер", ДанныеШапкиВакансии.Номер);
	ОсновнаяИнформацияВакансии.Вставить("НаименованиеВакансии", ДанныеШапкиВакансии.НаименованиеВакансии);
	ОсновнаяИнформацияВакансии.Вставить("ОпытРаботы", ДанныеШапкиВакансии.ОпытРаботы);
	ОсновнаяИнформацияВакансии.Вставить("ТипЗанятости", ДанныеШапкиВакансии.ТипЗанятости);
	ОсновнаяИнформацияВакансии.Вставить("ГрафикРаботы", ДанныеШапкиВакансии.ГрафикРаботы);
	ОсновнаяИнформацияВакансии.Вставить("ФорматРаботы", ДанныеШапкиВакансии.ФорматРаботы);
	ОсновнаяИнформацияВакансии.Вставить("ОплатаТрудаОт", ДанныеШапкиВакансии.ОплатаТрудаОт);
	ОсновнаяИнформацияВакансии.Вставить("ОплатаТрудаДо", ДанныеШапкиВакансии.ОплатаТрудаДо);
	ОсновнаяИнформацияВакансии.Вставить("ДоВычетаНалога", ДанныеШапкиВакансии.ДоВычетаНалога);		
	ОсновнаяИнформацияВакансии.Вставить("ХранилищеФорматированногоТекста", ДанныеШапкиВакансии.ХранилищеФорматированногоТекста.Получить());
	ОсновнаяИнформацияВакансии.Вставить("СтатусВакансии", ДанныеШапкиВакансии.СтатусВакансии);
	
	СписокНавыков = Новый Массив;
	Пока Навыки.Следующий() Цикл
		Навык = Новый Структура("Навык", Навыки.НавыкПредставление);
		СписокНавыков.Добавить(Навык);
	КонецЦикла;
	
	СписокЯзыков = Новый Массив;
	Пока Языки.Следующий() Цикл
		Язык = Новый Структура("Язык, УровеньЗнания, ИдентификаторЯзыка", Языки.ЯзыкПредставление, Языки.УровеньВладения, Языки.ЯзыкИдентификаторЯзыкаХХ);
		СписокЯзыков.Добавить(Язык);
	КонецЦикла;
	
	ДанныеВакансии = Новый Массив;
	ДанныеВакансии.Добавить(ОсновнаяИнформацияВакансии);
	ДанныеВакансии.Добавить(СписокНавыков);
	ДанныеВакансии.Добавить(СписокЯзыков);
	ДанныеВакансии.Добавить(ИдентификаторЧерновика.ИдентификаторЧерновика);
	ДанныеВакансии.Добавить(ГотовностьКПубликации.ГотовностьКПубликации);
	
	Возврат ДанныеВакансии; 
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЗначенияРеквизитов()
	
	ИдентификаторЧерновика = "";
	КодВакансии = "";
	НазваниеВакансии = "";
	Специализация = "";
	ОпытРаботы = Неопределено;
	ТипЗанятости = Неопределено;
	ФорматРаботы = Неопределено;
	Стажировка = Ложь;
	ВременноеТрудоустройство = Ложь;
	СписокГрафиковРаботы.Очистить();
	СписокРабочихЧасовВДень.Очистить();
	НочныеСмены = Ложь;
	СписокГородовПубликации.Очистить();
	ЗарплатаОт = 0;
	ЗарплатаДо = 0;
	ДоВычетаНалога = Ложь;
	СписокКлючевыхНавыков.Очистить();
	СписокЯзыков.Очистить();
	ОписаниеВакансии.Удалить();
	СоискательСИнвалидностью = Ложь;
	НеполноеРезюме = Ложь;
	СопроводительноеПисьмо = Ложь;
	Менеджер = Неопределено;
	ПочтаМенеджера = "";
	РабочийТелефонМенеджера = "";
	КомментарийККонтактам = "";
	УведомлятьОНовыхОткликах = Ложь;
	РазрешениеСообщений = Ложь;
	ТипПубликации = Неопределено;
	ТипВакансии = Неопределено;
	ВремяЗапланированнойПубликации = '00010101';
	РазместитьНаЗарплатаРу = Ложь;
	ГотовностьЧерновикаКПубликации = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеЧерновикаВРегистр(ДанныеЧерновика)

	НоваяЗапись = РегистрыСведений.ЧерновикиВакансийХХ.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = ТекущаяДата();
	НоваяЗапись.Вакансия = ДанныеЧерновика.Вакансия;
	НоваяЗапись.ТипПубликации = ДанныеЧерновика.ТипПубликации;
	НоваяЗапись.ТипВакансии = ДанныеЧерновика.ТипВакансии;
	НоваяЗапись.ВидИзменения = ДанныеЧерновика.ВидИзменения;
	НоваяЗапись.ГотовностьКПубликации = ДанныеЧерновика.ГотовностьКПубликации;
	НоваяЗапись.ИдентификаторЧерновика = ДанныеЧерновика.ИдентификаторЧерновика;
	НоваяЗапись.Ответственный = ДанныеЧерновика.Ответственный;
	НоваяЗапись.ОтветственныйЗаВакансию = ДанныеЧерновика.ОтветственныйЗаВакансию;
	НоваяЗапись.Записать();

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхРеквизитов()

	РеквизитыЗаполнены = Истина;
	
	Если Вакансия.Пустая() Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите вакансию", "Вакансия");
		Возврат Ложь;
	КонецЕсли;
		
	Если ПустаяСтрока(НазваниеВакансии) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Название вакансии не заполнено", "НазваниеВакансии");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Специализация) Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Специализация не заполнена", "Специализация");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если СписокГрафиковРаботы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите хотя бы 1 график работы", "СписокГрафиковРаботы");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если СписокРабочихЧасовВДень.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите хотя бы 1 значение в списке рабочих часов", "СписокГрафиковРаботы");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если СписокГородовПубликации.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите хотя бы 1 город", "СписокГрафиковРаботы");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если СтрДлина(ОписаниеВакансии.ПолучитьТекст()) < 150 Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Описание вакансии не может быть менее 150 символов", "ОписаниеВакансии");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если Менеджер.Пустая() Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите ответственного за вакансию", "Менеджер");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если ТипПубликации.Пустая() Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите тип публикации", "ТипПубликации");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если ТипВакансии.Пустая() Тогда
		ОбщегоНазначенияКлиент.ВывестиСообщение("Выберите тип вакансии", "ТипВакансии");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;

	Возврат РеквизитыЗаполнены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеВакансии(Вакансия)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансия.ХранилищеФорматированногоТекста КАК ХранилищеФорматированногоТекста
		|ИЗ
		|	Документ.Вакансия КАК Вакансия
		|ГДЕ
		|	Вакансия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Вакансия);	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	Возврат Выборка.ХранилищеФорматированногоТекста.Получить();

КонецФункции

&НаСервере
Процедура ИзменитьЗаголовокГруппыНаСервере(Список, ЭлементГруппа, НазваниеКолонки, НаименованиеЗаголовка)

	КоличествоЗаписей = Список.Количество();
	Если КоличествоЗаписей > 1 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка + ": " + Список.Получить(0)[НазваниеКолонки] + " и еще " + (КоличествоЗаписей - 1);
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка + ": " + Список.Получить(0)[НазваниеКолонки];
	ИначеЕсли КоличествоЗаписей = 0 Тогда
		ЭлементГруппа.Заголовок = НаименованиеЗаголовка;
	КонецЕсли;		

КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьДанныеОВакансии(СсылкаНаВакансию)

	ДанныеВакансии = ПолучитьДанныеВакансии(СсылкаНаВакансию);
	ДанныеШапкиВакансии = ДанныеВакансии[0];
	
	Если ДанныеШапкиВакансии.СтатусВакансии = ПредопределенноеЗначение("Перечисление.СтатусыВакансий.Закрыта") Тогда		
		ОбщегоНазначенияКлиент.ВывестиСообщение("""" + Вакансия + """ была закрыта");
		Вакансия = Неопределено;
		Возврат;	
	КонецЕсли;
	
	Вакансия = СсылкаНаВакансию;
	КодВакансии = ДанныеШапкиВакансии.Номер;
	НазваниеВакансии = ДанныеШапкиВакансии.НаименованиеВакансии;
	ОпытРаботы = ДанныеШапкиВакансии.ОпытРаботы;
	
	Если ДанныеШапкиВакансии.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ПолнаяЗанятость") Тогда
		ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.Полная");
	ИначеЕсли ДанныеШапкиВакансии.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ЧастичнаяЗанятость") Тогда
		ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.Частичная"); 
	ИначеЕсли ДанныеШапкиВакансии.ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятости.ПроектнаяРабота") Тогда
		ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.ПроектИлиРазовоеЗадание");
	Иначе
		ТипЗанятости = ПредопределенноеЗначение("Перечисление.ТипыЗанятостиПриПубликацииВакансии.Вахта");
	КонецЕсли;
	
	ФорматРаботы = ДанныеШапкиВакансии.ФорматРаботы;
	ЗарплатаОт = ДанныеШапкиВакансии.ОплатаТрудаОт;
	ЗарплатаДо = ДанныеШапкиВакансии.ОплатаТрудаДо;
	ДоВычетаНалога = ДанныеШапкиВакансии.ДоВычетаНалога;
	ОписаниеВакансии = ДанныеШапкиВакансии.ХранилищеФорматированногоТекста;
	
	
	КлючевыеНавыки = ДанныеВакансии[1];
	Для Каждого КлючевойНавык Из КлючевыеНавыки Цикл
		НоваяСтрока = СписокКлючевыхНавыков.Добавить();
		НоваяСтрока.Навык = КлючевойНавык.Навык;
	КонецЦикла;
	
	Языки = ДанныеВакансии[2];
	Для Каждого Язык Из Языки Цикл
		НоваяСтрока = СписокЯзыков.Добавить();
		НоваяСтрока.Язык = Язык.Язык;
		Если Язык.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.Родной") Тогда
			НоваяСтрока.УровеньЗнания = ПредопределенноеЗначение("Перечисление.УровниЗнанийЯзыков.ВСовершенстве");
		Иначе
			НоваяСтрока.УровеньЗнания = Язык.УровеньЗнания;
		КонецЕсли;
		НоваяСтрока.ИдентификаторЯзыка = Язык.ИдентификаторЯзыка;
	КонецЦикла;
	
	ИдентификаторЧерновика = ДанныеВакансии[3];
	ГотовностьЧерновикаКПубликации = ДанныеВакансии[4];
	
	ИзменитьЗаголовокГруппы(СписокКлючевыхНавыков, Элементы.ГруппаКлючевыеНавыкиПодбор, "Навык", "Навыки");
	ИзменитьЗаголовокГруппы(СписокЯзыков, Элементы.ГруппаЗнанияЯзыковПодбор, "Язык", "Знание языков");	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГотовностьКПубликацииИзРегистра(Вакансия)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧерновикиВакансийХХСрезПоследних.ГотовностьКПубликации КАК ГотовностьКПубликации
		|ИЗ
		|	РегистрСведений.ЧерновикиВакансийХХ.СрезПоследних(, Вакансия = &Вакансия) КАК ЧерновикиВакансийХХСрезПоследних";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();

	Возврат Выборка.ГотовностьКПубликации;
	
КонецФункции


#КонецОбласти


